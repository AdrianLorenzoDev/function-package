(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "t_sucesion" defined at functions.ads:4, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural
 use        Standard__natural__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__natural.natural
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__natural__rep.to_rep (get a temp___idx_154)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__natural__rep.to_rep (get a temp___idx_154)) = (Standard__natural__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "t_sucesion" defined at functions.ads:4, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__natural__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__natural

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__natural.component_type, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get

end

(* Module for axiomatizing comparison for the array theory associated to type "t_sucesion" defined at functions.ads:4, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__natural_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural__rep
 use        Array__Int__Standard__natural

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__natural.component_type, 
 function to_rep = Standard__natural__rep.to_rep, 
 type map = Array__Int__Standard__natural.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__natural.get, 
 function bool_eq = Array__Int__Standard__natural.bool_eq

end

(* Module for axiomatizing type "t_sucesion" defined at functions.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Functions__t_sucesion
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__natural

 type component_type =
  Standard__natural.natural
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t_sucesion =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t_sucesion__ref =
  { mutable t_sucesion__content "model_trace:" "name:" : t_sucesion }
 
 function t_sucesion__ref___projection 
   (a : t_sucesion__ref) : t_sucesion =
  a.t_sucesion__content
 
 meta "model_projection" function t_sucesion__ref___projection
 
 meta "inline : no" function t_sucesion__ref___projection
 
 val t_sucesion__havoc 
   (x : t_sucesion__ref) : unit
  writes {x}

end

(* Module for defining the constant "n_elements" defined at functions.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Functions__sucesion__n_elements
 use import "_gnatprove_standard".Main

 function n_elements #"functions.ads" 7 0 0#"model" "model_trace:2843" "name:N_Elements" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n_elements" defined at functions.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__sucesion__n_elements___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "by" defined at functions.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Functions__sucesion__by
 use import "_gnatprove_standard".Main

 function by__ #"functions.ads" 7 0 0#"model" "model_trace:2852" "name:By" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "by" defined at functions.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__sucesion__by___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T27s" defined at functions.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Functions__sucesion__L26s__T27s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t27s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t27s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t27s__ref =
  { mutable t27s__content "model_trace:" "name:" : t27s }
 
 function t27s__ref___projection 
   (a : t27s__ref) : t27s =
  a.t27s__content
 
 meta "model_projection" function t27s__ref___projection
 
 meta "inline : no" function t27s__ref___projection
 
 val t27s__havoc 
   (x : t27s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "sucesion" defined at functions.ads:6, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Functions__sucesion
 use import "_gnatprove_standard".Main
 use        Functions__t_sucesion

 function sucesion 
   (n_elements : int) (by__ : int) : Functions__t_sucesion.t_sucesion
 
 predicate sucesion__function_guard 
   (result : Functions__t_sucesion.t_sucesion) (n_elements : int) (by__ : int) 

end

(* Module for axiomatizing the array theory associated to type "positives" defined at functions.ads:20, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_155   : int.
   (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_155)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_155   : int.
    (if (( (a__first <= temp___idx_155) /\ (temp___idx_155 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_155)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_155))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "positives" defined at functions.ads:20, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "positives" defined at functions.ads:20, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "positives" defined at functions.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Functions__positives
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type positives =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type positives__ref =
  { mutable positives__content "model_trace:" "name:" : positives }
 
 function positives__ref___projection 
   (a : positives__ref) : positives =
  a.positives__content
 
 meta "model_projection" function positives__ref___projection
 
 meta "inline : no" function positives__ref___projection
 
 val positives__havoc 
   (x : positives__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tv_vectorD1" defined at functions.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Functions__Tv_vectorD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tv_vectorD1 =
  < range 1 3 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  3
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tv_vectorD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tv_vectorD1__ref =
  { mutable tv_vectorD1__content "model_trace:" "name:" : tv_vectorD1 }
 
 function tv_vectorD1__ref___projection 
   (a : tv_vectorD1__ref) : tv_vectorD1 =
  a.tv_vectorD1__content
 
 meta "model_projection" function tv_vectorD1__ref___projection
 
 meta "inline : no" function tv_vectorD1__ref___projection
 
 val tv_vectorD1__havoc 
   (x : tv_vectorD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tv_vectorD1" defined at functions.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Functions__Tv_vectorD1__rep
 use        Functions__Tv_vectorD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Functions__Tv_vectorD1.tv_vectorD1) : int =
  (Functions__Tv_vectorD1.tv_vectorD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Functions__Tv_vectorD1.tv_vectorD1, 
 predicate in_range = Functions__Tv_vectorD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "Tv_vectorB" defined at functions.ads:21, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive
 use        Standard__positive__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__positive.positive
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_156   : int.
   (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
    ((Standard__positive__rep.to_rep (get a temp___idx_156)) = (Standard__positive__rep.to_rep (get b ((b__first - a__first) + temp___idx_156))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_156   : int.
    (if (( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) )) then (
     ((Standard__positive__rep.to_rep (get a temp___idx_156)) = (Standard__positive__rep.to_rep (get b ((b__first - a__first) + temp___idx_156))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tv_vectorB" defined at functions.ads:21, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__positive__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__positive

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__positive.component_type, 
 type map = Array__Int__Standard__positive.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__positive.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tv_vectorB" defined at functions.ads:21, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__positive_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive__rep
 use        Array__Int__Standard__positive

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__positive.component_type, 
 function to_rep = Standard__positive__rep.to_rep, 
 type map = Array__Int__Standard__positive.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__positive.get, 
 function bool_eq = Array__Int__Standard__positive.bool_eq

end

(* Module for axiomatizing type "Tv_vectorB" defined at functions.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Functions__Tv_vectorB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Functions__Tv_vectorD1
 use        Array__Int__Standard__positive

 type component_type =
  Standard__positive.positive
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__positive.map, 
 function array_bool_eq = Array__Int__Standard__positive.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__Tv_vectorD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tv_vectorB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tv_vectorB__ref =
  { mutable tv_vectorB__content "model_trace:" "name:" : tv_vectorB }
 
 function tv_vectorB__ref___projection 
   (a : tv_vectorB__ref) : tv_vectorB =
  a.tv_vectorB__content
 
 meta "model_projection" function tv_vectorB__ref___projection
 
 meta "inline : no" function tv_vectorB__ref___projection
 
 val tv_vectorB__havoc 
   (x : tv_vectorB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "v_vector" defined at functions.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Functions__v_vector
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive
 use        Array__Int__Standard__positive

 type component_type =
  Standard__positive.positive
 
 function first 
   : int =
  1
 
 function last 
   : int =
  3
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__positive.map, 
 function array_bool_eq = Array__Int__Standard__positive.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "num" defined at functions.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Functions__positiveornegative__num
 use import "_gnatprove_standard".Main

 function num #"functions.ads" 24 0 0#"model" "model_trace:2956" "name:Num" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "num" defined at functions.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__positiveornegative__num___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "positiveornegative" defined at functions.ads:23, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Functions__positiveornegative
 use import "_gnatprove_standard".Main

 function positiveornegative 
   (num : int) : bool
 
 predicate positiveornegative__function_guard 
   (result : bool) (num : int) 

end

(* Module for defining the constant "positiv" defined at functions.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Functions__positiveornegativevector__positiv
 use import "_gnatprove_standard".Main
 use        Functions__positives

 function positiv #"functions.ads" 40 0 0#"model_projected" "model_trace:3012" "name:Positiv" 
   : Functions__positives.positives
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "positiv" defined at functions.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__positiveornegativevector__positiv___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T29s" defined at functions.ads:44, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__L28s__T29s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t29s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t29s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t29s__ref =
  { mutable t29s__content "model_trace:" "name:" : t29s }
 
 function t29s__ref___projection 
   (a : t29s__ref) : t29s =
  a.t29s__content
 
 meta "model_projection" function t29s__ref___projection
 
 meta "inline : no" function t29s__ref___projection
 
 val t29s__havoc 
   (x : t29s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T31s" defined at functions.ads:47, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__L30s__T31s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t31s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t31s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t31s__ref =
  { mutable t31s__content "model_trace:" "name:" : t31s }
 
 function t31s__ref___projection 
   (a : t31s__ref) : t31s =
  a.t31s__content
 
 meta "model_projection" function t31s__ref___projection
 
 meta "inline : no" function t31s__ref___projection
 
 val t31s__havoc 
   (x : t31s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "positiveornegativevector" defined at functions.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Functions__positiveornegativevector
 use import "_gnatprove_standard".Main
 use        Functions__positives

 function positiveornegativevector 
   (positiv : Functions__positives.positives) : Functions__positives.positives
 
 predicate positiveornegativevector__function_guard 
   (result : Functions__positives.positives) (positiv : Functions__positives.positives) 

end

(* Module for defining the constant "vector" defined at functions.ads:55, created in Gnat2Why.Decls.Translate_Constant *)
module Functions__multvector__vector
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__positive

 function vector #"functions.ads" 55 0 0#"model_projected" "model_trace:3090" "name:Vector" 
   : Array__Int__Standard__positive.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vector" defined at functions.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__multvector__vector___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "multvector" defined at functions.ads:54, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Functions__multvector
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__positive

 function multvector 
   (vector : Array__Int__Standard__positive.map) : int
 
 predicate multvector__function_guard 
   (result : int) (vector : Array__Int__Standard__positive.map) 

end

(* Module for axiomatizing type "vector" defined at functions.ads:66, created in Gnat2Why.Types.Translate_Type *)
module Functions__vector
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__positive

 type component_type =
  Standard__positive.positive
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__positive.map, 
 function array_bool_eq = Array__Int__Standard__positive.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type vector =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type vector__ref =
  { mutable vector__content "model_trace:" "name:" : vector }
 
 function vector__ref___projection 
   (a : vector__ref) : vector =
  a.vector__content
 
 meta "model_projection" function vector__ref___projection
 
 meta "inline : no" function vector__ref___projection
 
 val vector__havoc 
   (x : vector__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "b_binary" defined at functions.ads:67, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Bool
 use import "_gnatprove_standard".Main
 use import "int".Int

 function index_I1_one 
   : int =
  1
 
 type component_type =
  bool
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_157   : int.
   (if (( (a__first <= temp___idx_157) /\ (temp___idx_157 <= a__last) )) then (
    ((get a temp___idx_157) = (get b ((b__first - a__first) + temp___idx_157)))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_157   : int.
    (if (( (a__first <= temp___idx_157) /\ (temp___idx_157 <= a__last) )) then (
     ((get a temp___idx_157) = (get b ((b__first - a__first) + temp___idx_157)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "b_binary" defined at functions.ads:67, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Bool__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Bool.component_type, 
 type map = Array__Int__Bool.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Bool.get

end

(* Module for axiomatizing logical operations for the array theory associated to type "b_binary" defined at functions.ads:67, created in Why.Gen.Arrays.Declare_Logical_Operation_Symbols *)
module Array__Int__Bool__Bool_Op
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Standard_Array_Logical_Op_Axioms with
 type map = Array__Int__Bool.map, 
 function get = Array__Int__Bool.get, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one

end

(* Module for axiomatizing comparison for the array theory associated to type "b_binary" defined at functions.ads:67, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Bool_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Array__Int__Bool

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Bool.component_type, 
 function to_rep = Boolean.to_int, 
 type map = Array__Int__Bool.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Bool.get, 
 function bool_eq = Array__Int__Bool.bool_eq

end

(* Module for axiomatizing type "b_binary" defined at functions.ads:67, created in Gnat2Why.Types.Translate_Type *)
module Functions__b_binary
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Bool

 type component_type =
  bool
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type b_binary =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type b_binary__ref =
  { mutable b_binary__content "model_trace:" "name:" : b_binary }
 
 function b_binary__ref___projection 
   (a : b_binary__ref) : b_binary =
  a.b_binary__content
 
 meta "model_projection" function b_binary__ref___projection
 
 meta "inline : no" function b_binary__ref___projection
 
 val b_binary__havoc 
   (x : b_binary__ref) : unit
  writes {x}

end

(* Module for defining the constant "values" defined at functions.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Functions__midterm__values
 use import "_gnatprove_standard".Main
 use        Functions__vector

 function values #"functions.ads" 70 0 0#"model_projected" "model_trace:3190" "name:Values" 
   : Functions__vector.vector
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "values" defined at functions.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__midterm__values___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "from" defined at functions.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Functions__midterm__from
 use import "_gnatprove_standard".Main

 function from #"functions.ads" 70 0 0#"model" "model_trace:3199" "name:From" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "from" defined at functions.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__midterm__from___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "to" defined at functions.ads:70, created in Gnat2Why.Decls.Translate_Constant *)
module Functions__midterm__to
 use import "_gnatprove_standard".Main

 function to__ #"functions.ads" 70 0 0#"model" "model_trace:3208" "name:To" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "to" defined at functions.ads:70, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__midterm__to___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T33s" defined at functions.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__L32s__T33s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t33s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t33s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t33s__ref =
  { mutable t33s__content "model_trace:" "name:" : t33s }
 
 function t33s__ref___projection 
   (a : t33s__ref) : t33s =
  a.t33s__content
 
 meta "model_projection" function t33s__ref___projection
 
 meta "inline : no" function t33s__ref___projection
 
 val t33s__havoc 
   (x : t33s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "midterm" defined at functions.ads:69, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Functions__midterm
 use import "_gnatprove_standard".Main
 use        Functions__b_binary
 use        Functions__vector

 function midterm 
   (values : Functions__vector.vector) (from : int) (to__ : int) : Functions__b_binary.b_binary
 
 predicate midterm__function_guard 
   (result : Functions__b_binary.b_binary) (values : Functions__vector.vector) (from : int) (to__ : int) 

end

(* Module for axiomatizing type "TTresultSP1" defined at functions.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Functions__sucesion__TTresultSP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content "model_trace:" "name:" : tTresultSP1 }
 
 function tTresultSP1__ref___projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref___projection
 
 meta "inline : no" function tTresultSP1__ref___projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at functions.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Functions__sucesion__TresultS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__natural
 use        Functions__sucesion__TTresultSP1

 type component_type =
  Standard__natural.natural
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__sucesion__TTresultSP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tresultS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tresultS__ref =
  { mutable tresultS__content "model_trace:" "name:" : tresultS }
 
 function tresultS__ref___projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref___projection
 
 meta "inline : no" function tresultS__ref___projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T1b" defined at functions.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Functions__sucesion__T1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t1b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t1b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t1b__ref =
  { mutable t1b__content "model_trace:" "name:" : t1b }
 
 function t1b__ref___projection 
   (a : t1b__ref) : t1b =
  a.t1b__content
 
 meta "model_projection" function t1b__ref___projection
 
 meta "inline : no" function t1b__ref___projection
 
 val t1b__havoc 
   (x : t1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at functions.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Functions__sucesion__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__natural
 use        Standard__integer__rep
 use        Array__Int__Standard__natural
 use        Functions__sucesion__T1b

 type component_type =
  Standard__natural.natural
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__natural.map, 
 function array_bool_eq = Array__Int__Standard__natural.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__sucesion__T1b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t2b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at functions.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Functions__sucesion__L_1__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t3b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at functions.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Functions__sucesion__L_1__L6b__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t7b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T5b" defined at functions.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Functions__sucesion__L_1__L4b__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t5b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content "model_trace:" "name:" : t5b }
 
 function t5b__ref___projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref___projection
 
 meta "inline : no" function t5b__ref___projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS11bP1" defined at functions.adb:29, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__TS11bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS11bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS11bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS11bP1__ref =
  { mutable tS11bP1__content "model_trace:" "name:" : tS11bP1 }
 
 function tS11bP1__ref___projection 
   (a : tS11bP1__ref) : tS11bP1 =
  a.tS11bP1__content
 
 meta "model_projection" function tS11bP1__ref___projection
 
 meta "inline : no" function tS11bP1__ref___projection
 
 val tS11bP1__havoc 
   (x : tS11bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S11b" defined at functions.adb:29, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__S11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Functions__positiveornegativevector__TS11bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__positiveornegativevector__TS11bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s11b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s11b__ref =
  { mutable s11b__content "model_trace:" "name:" : s11b }
 
 function s11b__ref___projection 
   (a : s11b__ref) : s11b =
  a.s11b__content
 
 meta "model_projection" function s11b__ref___projection
 
 meta "inline : no" function s11b__ref___projection
 
 val s11b__havoc 
   (x : s11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTresarraySP1" defined at functions.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__TTresarraySP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTresarraySP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTresarraySP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresarraySP1__ref =
  { mutable tTresarraySP1__content "model_trace:" "name:" : tTresarraySP1 }
 
 function tTresarraySP1__ref___projection 
   (a : tTresarraySP1__ref) : tTresarraySP1 =
  a.tTresarraySP1__content
 
 meta "model_projection" function tTresarraySP1__ref___projection
 
 meta "inline : no" function tTresarraySP1__ref___projection
 
 val tTresarraySP1__havoc 
   (x : tTresarraySP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresarrayS" defined at functions.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__TresarrayS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Functions__positiveornegativevector__TTresarraySP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__positiveornegativevector__TTresarraySP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tresarrayS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tresarrayS__ref =
  { mutable tresarrayS__content "model_trace:" "name:" : tresarrayS }
 
 function tresarrayS__ref___projection 
   (a : tresarrayS__ref) : tresarrayS =
  a.tresarrayS__content
 
 meta "model_projection" function tresarrayS__ref___projection
 
 meta "inline : no" function tresarrayS__ref___projection
 
 val tresarrayS__havoc 
   (x : tresarrayS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12b" defined at functions.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__T12b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t12b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t12b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12b__ref =
  { mutable t12b__content "model_trace:" "name:" : t12b }
 
 function t12b__ref___projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref___projection
 
 meta "inline : no" function t12b__ref___projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T13b" defined at functions.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__T13b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Functions__positiveornegativevector__T12b

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__positiveornegativevector__T12b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t13b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t13b__ref =
  { mutable t13b__content "model_trace:" "name:" : t13b }
 
 function t13b__ref___projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref___projection
 
 meta "inline : no" function t13b__ref___projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at functions.adb:32, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__L_2__T14b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref =
  { mutable t14b__content "model_trace:" "name:" : t14b }
 
 function t14b__ref___projection 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref___projection
 
 meta "inline : no" function t14b__ref___projection
 
 val t14b__havoc 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T18b" defined at functions.adb:36, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__L_2__L17b__T18b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18b__ref =
  { mutable t18b__content "model_trace:" "name:" : t18b }
 
 function t18b__ref___projection 
   (a : t18b__ref) : t18b =
  a.t18b__content
 
 meta "model_projection" function t18b__ref___projection
 
 meta "inline : no" function t18b__ref___projection
 
 val t18b__havoc 
   (x : t18b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T16b" defined at functions.adb:36, created in Gnat2Why.Types.Translate_Type *)
module Functions__positiveornegativevector__L_2__L15b__T16b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16b__ref =
  { mutable t16b__content "model_trace:" "name:" : t16b }
 
 function t16b__ref___projection 
   (a : t16b__ref) : t16b =
  a.t16b__content
 
 meta "model_projection" function t16b__ref___projection
 
 meta "inline : no" function t16b__ref___projection
 
 val t16b__havoc 
   (x : t16b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T20b" defined at functions.adb:47, created in Gnat2Why.Types.Translate_Type *)
module Functions__multvector__L_3__T20b
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t20b =
  < range 1 3 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  3
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t20b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t20b__ref =
  { mutable t20b__content "model_trace:" "name:" : t20b }
 
 function t20b__ref___projection 
   (a : t20b__ref) : t20b =
  a.t20b__content
 
 meta "model_projection" function t20b__ref___projection
 
 meta "inline : no" function t20b__ref___projection
 
 val t20b__havoc 
   (x : t20b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T20b" defined at functions.adb:47, created in Gnat2Why.Types.Translate_Type *)
module Functions__multvector__L_3__T20b__rep
 use        Functions__multvector__L_3__T20b
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Functions__multvector__L_3__T20b.t20b) : int =
  (Functions__multvector__L_3__T20b.t20b'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Functions__multvector__L_3__T20b.t20b, 
 predicate in_range = Functions__multvector__L_3__T20b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TS22bP1" defined at functions.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__TS22bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS22bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS22bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS22bP1__ref =
  { mutable tS22bP1__content "model_trace:" "name:" : tS22bP1 }
 
 function tS22bP1__ref___projection 
   (a : tS22bP1__ref) : tS22bP1 =
  a.tS22bP1__content
 
 meta "model_projection" function tS22bP1__ref___projection
 
 meta "inline : no" function tS22bP1__ref___projection
 
 val tS22bP1__havoc 
   (x : tS22bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S22b" defined at functions.adb:63, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__S22b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__positive
 use        Functions__midterm__TS22bP1

 type component_type =
  Standard__positive.positive
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__positive.map, 
 function array_bool_eq = Array__Int__Standard__positive.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__midterm__TS22bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s22b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s22b__ref =
  { mutable s22b__content "model_trace:" "name:" : s22b }
 
 function s22b__ref___projection 
   (a : s22b__ref) : s22b =
  a.s22b__content
 
 meta "model_projection" function s22b__ref___projection
 
 meta "inline : no" function s22b__ref___projection
 
 val s22b__havoc 
   (x : s22b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTresultSP1" defined at functions.adb:65, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__TTresultSP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content "model_trace:" "name:" : tTresultSP1 }
 
 function tTresultSP1__ref___2__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref___2__projection
 
 meta "inline : no" function tTresultSP1__ref___2__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at functions.adb:65, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__TresultS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Bool
 use        Functions__midterm__TTresultSP1

 type component_type =
  bool
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__midterm__TTresultSP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tresultS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tresultS__ref =
  { mutable tresultS__content "model_trace:" "name:" : tresultS }
 
 function tresultS__ref___2__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref___2__projection
 
 meta "inline : no" function tresultS__ref___2__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T23b" defined at functions.adb:65, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__T23b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t23b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t23b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t23b__ref =
  { mutable t23b__content "model_trace:" "name:" : t23b }
 
 function t23b__ref___projection 
   (a : t23b__ref) : t23b =
  a.t23b__content
 
 meta "model_projection" function t23b__ref___projection
 
 meta "inline : no" function t23b__ref___projection
 
 val t23b__havoc 
   (x : t23b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T24b" defined at functions.adb:65, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__T24b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Bool
 use        Functions__midterm__T23b

 type component_type =
  bool
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Bool.map, 
 function array_bool_eq = Array__Int__Bool.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Functions__midterm__T23b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t24b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t24b__ref =
  { mutable t24b__content "model_trace:" "name:" : t24b }
 
 function t24b__ref___projection 
   (a : t24b__ref) : t24b =
  a.t24b__content
 
 meta "model_projection" function t24b__ref___projection
 
 meta "inline : no" function t24b__ref___projection
 
 val t24b__havoc 
   (x : t24b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T25b" defined at functions.adb:67, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__L_4__T25b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t25b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t25b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t25b__ref =
  { mutable t25b__content "model_trace:" "name:" : t25b }
 
 function t25b__ref___projection 
   (a : t25b__ref) : t25b =
  a.t25b__content
 
 meta "model_projection" function t25b__ref___projection
 
 meta "inline : no" function t25b__ref___projection
 
 val t25b__havoc 
   (x : t25b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T29b" defined at functions.adb:73, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__L_4__L28b__T29b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t29b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t29b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t29b__ref =
  { mutable t29b__content "model_trace:" "name:" : t29b }
 
 function t29b__ref___projection 
   (a : t29b__ref) : t29b =
  a.t29b__content
 
 meta "model_projection" function t29b__ref___projection
 
 meta "inline : no" function t29b__ref___projection
 
 val t29b__havoc 
   (x : t29b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T27b" defined at functions.adb:73, created in Gnat2Why.Types.Translate_Type *)
module Functions__midterm__L_4__L26b__T27b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t27b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t27b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t27b__ref =
  { mutable t27b__content "model_trace:" "name:" : t27b }
 
 function t27b__ref___projection 
   (a : t27b__ref) : t27b =
  a.t27b__content
 
 meta "model_projection" function t27b__ref___projection
 
 meta "inline : no" function t27b__ref___projection
 
 val t27b__havoc 
   (x : t27b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "result" defined at functions.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Functions__sucesion__result
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__natural

 val result__ #"functions.adb" 6 0 0#"model_projected" "model_trace:2336" "name:Result"  : Array__Int__Standard__natural.map__ref 
 
 function result____first #"functions.adb" 6 0 0#"model_projected" "name:Result" "model_trace:2336'First" 
   : Standard__integer.integer
 
 function result____last #"functions.adb" 6 0 0#"model_projected" "name:Result" "model_trace:2336'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at functions.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__sucesion__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at functions.adb:9, created in Gnat2Why.Decls.Translate_Variable *)
module Functions__sucesion__L_1__i
 use import "_gnatprove_standard".Main

 val i #"functions.adb" 9 0 0#"model_projected" "model_trace:2357" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at functions.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__sucesion__L_1__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "resarray" defined at functions.adb:30, created in Gnat2Why.Decls.Translate_Variable *)
module Functions__positiveornegativevector__resarray
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val resarray #"functions.adb" 30 0 0#"model_projected" "model_trace:2452" "name:ResArray"  : Array__Int__Standard__integer.map__ref 
 
 function resarray__first #"functions.adb" 30 0 0#"model_projected" "name:ResArray" "model_trace:2452'First" 
   : Standard__integer.integer
 
 function resarray__last #"functions.adb" 30 0 0#"model_projected" "name:ResArray" "model_trace:2452'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "resarray" defined at functions.adb:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__positiveornegativevector__resarray___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at functions.adb:32, created in Gnat2Why.Decls.Translate_Variable *)
module Functions__positiveornegativevector__L_2__i
 use import "_gnatprove_standard".Main

 val i #"functions.adb" 32 0 0#"model_projected" "name:I" "model_trace:2472"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at functions.adb:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__positiveornegativevector__L_2__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "res" defined at functions.adb:45, created in Gnat2Why.Decls.Translate_Variable *)
module Functions__multvector__res
 use import "_gnatprove_standard".Main

 val res #"functions.adb" 45 0 0#"model_projected" "model_trace:2545" "name:res"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "res" defined at functions.adb:45, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__multvector__res___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at functions.adb:47, created in Gnat2Why.Decls.Translate_Variable *)
module Functions__multvector__L_3__i
 use import "_gnatprove_standard".Main

 val i #"functions.adb" 47 0 0#"model_projected" "name:I" "model_trace:2558"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at functions.adb:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__multvector__L_3__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at functions.adb:65, created in Gnat2Why.Decls.Translate_Variable *)
module Functions__midterm__result
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Bool

 val result__ #"functions.adb" 65 0 0#"model_projected" "name:Result" "model_trace:2674"  : Array__Int__Bool.map__ref 
 
 function result____first #"functions.adb" 65 0 0#"model_projected" "name:Result" "model_trace:2674'First" 
   : Standard__integer.integer
 
 function result____last #"functions.adb" 65 0 0#"model_projected" "name:Result" "model_trace:2674'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at functions.adb:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__midterm__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at functions.adb:67, created in Gnat2Why.Decls.Translate_Variable *)
module Functions__midterm__L_4__i
 use import "_gnatprove_standard".Main

 val i #"functions.adb" 67 0 0#"model_projected" "name:I" "model_trace:2694"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at functions.adb:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__midterm__L_4__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining the loop exit exception for the loop "L_1" defined at functions.adb:9, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Functions__sucesion__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at functions.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__sucesion__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at functions.adb:32, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Functions__positiveornegativevector__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at functions.adb:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__positiveornegativevector__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at functions.adb:47, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Functions__multvector__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at functions.adb:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__multvector__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_4" defined at functions.adb:67, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Functions__midterm__L_4
 use import "_gnatprove_standard".Main

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at functions.adb:67, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Functions__midterm__L_4___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "t_sucesion" defined at functions.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__t_sucesion___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Functions__t_sucesion

 predicate dynamic_invariant "inline" 
   (temp___expr_162 : Functions__t_sucesion.t_sucesion) (temp___is_init_158 : bool) (temp___skip_constant_159 : bool) (temp___do_toplevel_160 : bool) (temp___do_typ_inv_161 : bool)  =
  (if (temp___skip_constant_159) then (
   true) else (
   (Functions__t_sucesion.dynamic_property Standard__positive.first Standard__positive.last (Functions__t_sucesion.first temp___expr_162) (Functions__t_sucesion.last temp___expr_162))))

end

(* Module giving axioms for type "T27s" defined at functions.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__sucesion__L26s__T27s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "positives" defined at functions.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positives___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Functions__positives

 predicate dynamic_invariant "inline" 
   (temp___expr_170 : Functions__positives.positives) (temp___is_init_166 : bool) (temp___skip_constant_167 : bool) (temp___do_toplevel_168 : bool) (temp___do_typ_inv_169 : bool)  =
  (if (temp___skip_constant_167) then (
   true) else (
   (Functions__positives.dynamic_property Standard__positive.first Standard__positive.last (Functions__positives.first temp___expr_170) (Functions__positives.last temp___expr_170))))

end

(* Module giving axioms for type "Tv_vectorD1" defined at functions.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__Tv_vectorD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tv_vectorB" defined at functions.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__Tv_vectorB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "v_vector" defined at functions.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__v_vector___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_176 : Array__Int__Standard__positive.map) (temp___is_init_172 : bool) (temp___skip_constant_173 : bool) (temp___do_toplevel_174 : bool) (temp___do_typ_inv_175 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_178 : Array__Int__Standard__positive.map) (temp___skip_top_level_179 : bool)  =
  true

end

(* Module giving axioms for type "T29s" defined at functions.ads:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__L28s__T29s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T31s" defined at functions.ads:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__L30s__T31s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "vector" defined at functions.ads:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__vector___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Functions__vector

 predicate dynamic_invariant "inline" 
   (temp___expr_192 : Functions__vector.vector) (temp___is_init_188 : bool) (temp___skip_constant_189 : bool) (temp___do_toplevel_190 : bool) (temp___do_typ_inv_191 : bool)  =
  (if (temp___skip_constant_189) then (
   true) else (
   (Functions__vector.dynamic_property Standard__positive.first Standard__positive.last (Functions__vector.first temp___expr_192) (Functions__vector.last temp___expr_192))))

end

(* Module giving axioms for type "b_binary" defined at functions.ads:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__b_binary___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Functions__b_binary

 predicate dynamic_invariant "inline" 
   (temp___expr_198 : Functions__b_binary.b_binary) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool)  =
  (if (temp___skip_constant_195) then (
   true) else (
   (Functions__b_binary.dynamic_property Standard__positive.first Standard__positive.last (Functions__b_binary.first temp___expr_198) (Functions__b_binary.last temp___expr_198))))

end

(* Module giving axioms for type "T33s" defined at functions.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__L32s__T33s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TTresultSP1" defined at functions.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__sucesion__TTresultSP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TresultS" defined at functions.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__sucesion__TresultS___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Functions__sucesion__n_elements
 use        Functions__sucesion__TresultS

 predicate dynamic_invariant "inline" 
   (temp___expr_208 : Functions__sucesion__TresultS.tresultS) (temp___is_init_204 : bool) (temp___skip_constant_205 : bool) (temp___do_toplevel_206 : bool) (temp___do_typ_inv_207 : bool)  =
  (if (temp___skip_constant_205) then (
   true) else (
   ( (Functions__sucesion__TresultS.dynamic_property 1 Functions__sucesion__n_elements.n_elements (Functions__sucesion__TresultS.first temp___expr_208) (Functions__sucesion__TresultS.last temp___expr_208)) /\ ( ((Functions__sucesion__TresultS.first temp___expr_208) = 1) /\ ((Functions__sucesion__TresultS.last temp___expr_208) = Functions__sucesion__n_elements.n_elements) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_210 : Functions__sucesion__TresultS.tresultS) (temp___skip_top_level_211 : bool)  =
  true

end

(* Module giving axioms for type "T1b" defined at functions.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__sucesion__T1b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2b" defined at functions.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__sucesion__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at functions.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__sucesion__L_1__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at functions.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__sucesion__L_1__L6b__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5b" defined at functions.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__sucesion__L_1__L4b__T5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS11bP1" defined at functions.adb:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__TS11bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S11b" defined at functions.adb:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__S11b___axiom
 use import "_gnatprove_standard".Main
 use        Functions__positives
 use        Functions__positiveornegativevector__positiv
 use        Functions__positiveornegativevector__S11b

 predicate dynamic_invariant "inline" 
   (temp___expr_218 : Functions__positiveornegativevector__S11b.s11b) (temp___is_init_214 : bool) (temp___skip_constant_215 : bool) (temp___do_toplevel_216 : bool) (temp___do_typ_inv_217 : bool)  =
  (if (temp___skip_constant_215) then (
   true) else (
   ( (Functions__positiveornegativevector__S11b.dynamic_property (Functions__positives.first Functions__positiveornegativevector__positiv.positiv) (Functions__positives.last Functions__positiveornegativevector__positiv.positiv) (Functions__positiveornegativevector__S11b.first temp___expr_218) (Functions__positiveornegativevector__S11b.last temp___expr_218)) /\ ( ((Functions__positiveornegativevector__S11b.first temp___expr_218) = (Functions__positives.first Functions__positiveornegativevector__positiv.positiv)) /\ ((Functions__positiveornegativevector__S11b.last temp___expr_218) = (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_220 : Functions__positiveornegativevector__S11b.s11b) (temp___skip_top_level_221 : bool)  =
  true

end

(* Module giving axioms for type "TTresarraySP1" defined at functions.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__TTresarraySP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TresarrayS" defined at functions.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__TresarrayS___axiom
 use import "_gnatprove_standard".Main
 use        Functions__positives
 use        Functions__positiveornegativevector__positiv
 use        Functions__positiveornegativevector__TresarrayS

 predicate dynamic_invariant "inline" 
   (temp___expr_228 : Functions__positiveornegativevector__TresarrayS.tresarrayS) (temp___is_init_224 : bool) (temp___skip_constant_225 : bool) (temp___do_toplevel_226 : bool) (temp___do_typ_inv_227 : bool)  =
  (if (temp___skip_constant_225) then (
   true) else (
   ( (Functions__positiveornegativevector__TresarrayS.dynamic_property (Functions__positives.first Functions__positiveornegativevector__positiv.positiv) (Functions__positives.last Functions__positiveornegativevector__positiv.positiv) (Functions__positiveornegativevector__TresarrayS.first temp___expr_228) (Functions__positiveornegativevector__TresarrayS.last temp___expr_228)) /\ ( ((Functions__positiveornegativevector__TresarrayS.first temp___expr_228) = (Functions__positives.first Functions__positiveornegativevector__positiv.positiv)) /\ ((Functions__positiveornegativevector__TresarrayS.last temp___expr_228) = (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_230 : Functions__positiveornegativevector__TresarrayS.tresarrayS) (temp___skip_top_level_231 : bool)  =
  true

end

(* Module giving axioms for type "T12b" defined at functions.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__T12b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T13b" defined at functions.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__T13b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14b" defined at functions.adb:32, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__L_2__T14b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18b" defined at functions.adb:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__L_2__L17b__T18b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T16b" defined at functions.adb:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__positiveornegativevector__L_2__L15b__T16b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20b" defined at functions.adb:47, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__multvector__L_3__T20b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS22bP1" defined at functions.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__TS22bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S22b" defined at functions.adb:63, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__S22b___axiom
 use import "_gnatprove_standard".Main
 use        Functions__vector
 use        Functions__midterm__values
 use        Functions__midterm__S22b

 predicate dynamic_invariant "inline" 
   (temp___expr_238 : Functions__midterm__S22b.s22b) (temp___is_init_234 : bool) (temp___skip_constant_235 : bool) (temp___do_toplevel_236 : bool) (temp___do_typ_inv_237 : bool)  =
  (if (temp___skip_constant_235) then (
   true) else (
   ( (Functions__midterm__S22b.dynamic_property (Functions__vector.first Functions__midterm__values.values) (Functions__vector.last Functions__midterm__values.values) (Functions__midterm__S22b.first temp___expr_238) (Functions__midterm__S22b.last temp___expr_238)) /\ ( ((Functions__midterm__S22b.first temp___expr_238) = (Functions__vector.first Functions__midterm__values.values)) /\ ((Functions__midterm__S22b.last temp___expr_238) = (Functions__vector.last Functions__midterm__values.values)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_240 : Functions__midterm__S22b.s22b) (temp___skip_top_level_241 : bool)  =
  true

end

(* Module giving axioms for type "TTresultSP1" defined at functions.adb:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__TTresultSP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TresultS" defined at functions.adb:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__TresultS___axiom
 use import "_gnatprove_standard".Main
 use        Functions__vector
 use        Functions__midterm__values
 use        Functions__midterm__TresultS

 predicate dynamic_invariant "inline" 
   (temp___expr_248 : Functions__midterm__TresultS.tresultS) (temp___is_init_244 : bool) (temp___skip_constant_245 : bool) (temp___do_toplevel_246 : bool) (temp___do_typ_inv_247 : bool)  =
  (if (temp___skip_constant_245) then (
   true) else (
   ( (Functions__midterm__TresultS.dynamic_property (Functions__vector.first Functions__midterm__values.values) (Functions__vector.last Functions__midterm__values.values) (Functions__midterm__TresultS.first temp___expr_248) (Functions__midterm__TresultS.last temp___expr_248)) /\ ( ((Functions__midterm__TresultS.first temp___expr_248) = (Functions__vector.first Functions__midterm__values.values)) /\ ((Functions__midterm__TresultS.last temp___expr_248) = (Functions__vector.last Functions__midterm__values.values)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_250 : Functions__midterm__TresultS.tresultS) (temp___skip_top_level_251 : bool)  =
  true

end

(* Module giving axioms for type "T23b" defined at functions.adb:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__T23b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T24b" defined at functions.adb:65, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__T24b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T25b" defined at functions.adb:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__L_4__T25b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T29b" defined at functions.adb:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__L_4__L28b__T29b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T27b" defined at functions.adb:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Functions__midterm__L_4__L26b__T27b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at functions.adb:6, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Functions__sucesion__result__aggregate_def
 use import "_gnatprove_standard".Main
 use        Functions__sucesion__T2b

 function functions__sucesion__result__aggregate_def 
   (temp___255 : int) (temp___256 : int) (temp___257 : int) : Functions__sucesion__T2b.t2b

end

(* Module for declaring an abstract function for the aggregate at functions.adb:30, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Functions__positiveornegativevector__resarray__aggregate_def
 use import "_gnatprove_standard".Main
 use        Functions__positiveornegativevector__T13b

 function functions__positiveornegativevector__resarray__aggregate_def 
   (temp___270 : int) (temp___271 : int) (temp___272 : int) : Functions__positiveornegativevector__T13b.t13b

end

(* Module for declaring an abstract function for the aggregate at functions.adb:65, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Functions__midterm__result__aggregate_def
 use import "_gnatprove_standard".Main
 use        Functions__midterm__T24b

 function functions__midterm__result__aggregate_def 
   (temp___291 : bool) (temp___292 : int) (temp___293 : int) : Functions__midterm__T24b.t24b

end
(* Module for declaring a program function (and possibly an axiom) for "sucesion" defined at functions.ads:6, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Functions__sucesion___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__natural__rep
 use        Standard__positive___axiom
 use        Functions__t_sucesion
 use        Functions__sucesion
 use        Array__Int__Standard__natural
 use        Functions__t_sucesion___axiom
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural

 val sucesion 
   (n_elements : int) (by__ : int) : Functions__t_sucesion.t_sucesion
  requires {  ( (n_elements < 2147483647) /\ ( (by__ < 2147483647) /\ (by__ < (Int_Division.div 2147483647 n_elements)) ) ) }
  ensures {  ( ( (result = (Functions__sucesion.sucesion n_elements by__)) /\ (Functions__sucesion.sucesion__function_guard result n_elements by__) ) /\ ( (Functions__t_sucesion___axiom.dynamic_invariant result True False True True) /\ (forall j   "model" "model_trace:2903" "name:J"  : int.
   ( ( (1 <= j) /\ (j <= n_elements) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Functions__t_sucesion.to_array result) j)) = (j * by__)) )) ) ) }
 
 axiom sucesion__post_axiom :
  (forall n_elements   by__   : int [(Functions__sucesion.sucesion n_elements by__)].
   ( ( ( (Standard__positive___axiom.dynamic_invariant n_elements True True True True) /\ (Standard__natural___axiom.dynamic_invariant by__ True True True True) ) /\ ( (n_elements < 2147483647) /\ ( (by__ < 2147483647) /\ (by__ < (Int_Division.div 2147483647 n_elements)) ) ) ) -> (let result = (Functions__sucesion.sucesion n_elements by__) in (
    (if ((Functions__sucesion.sucesion__function_guard result n_elements by__)) then (
     ( ( (forall j   "model" "model_trace:2903" "name:J"  : int.
      ( ( (1 <= j) /\ (j <= n_elements) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Functions__t_sucesion.to_array result) j)) = (j * by__)) )) /\ (Functions__t_sucesion___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "positiveornegative" defined at functions.ads:23, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Functions__positiveornegative___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Functions__positiveornegative

 val positiveornegative 
   (num : int) : bool
  requires {  ( (num < 2147483647) /\ (num > ( -2147483648 )) ) }
  ensures {  ( ( (result = (Functions__positiveornegative.positiveornegative num)) /\ (Functions__positiveornegative.positiveornegative__function_guard result num) ) /\ ( (if ((num >= 0)) then (
   ( (result = True) <-> true )) else (
   true)) /\ (if ((num < 0)) then (
   ( (result = True) <-> false )) else (
   true)) ) ) }
 
 axiom positiveornegative__post_axiom :
  (forall num   : int [(Functions__positiveornegative.positiveornegative num)].
   ( ( (Standard__integer___axiom.dynamic_invariant num True True True True) /\ ( (num < 2147483647) /\ (num > ( -2147483648 )) ) ) -> (let result = (Functions__positiveornegative.positiveornegative num) in (
    (if ((Functions__positiveornegative.positiveornegative__function_guard result num)) then (
     ( ( ( (if ((num >= 0)) then (
      ( (result = True) <-> true )) else (
      true)) /\ (if ((num < 0)) then (
      ( (result = True) <-> false )) else (
      true)) ) /\ true ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "positiveornegativevector" defined at functions.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Functions__positiveornegativevector___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Functions__positives
 use        Functions__positiveornegativevector
 use        Array__Int__Standard__integer
 use        Functions__positives___axiom
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val positiveornegativevector 
   (positiv : Functions__positives.positives) : Functions__positives.positives
  requires {  (forall i   "model" "name:I" "model_trace:3039"  : int.
   ( ( ((Functions__positives.first positiv) <= i) /\ (i <= (Functions__positives.last positiv)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array positiv) i)) > ( -2147483648 )) )) }
  ensures {  ( ( (result = (Functions__positiveornegativevector.positiveornegativevector positiv)) /\ (Functions__positiveornegativevector.positiveornegativevector__function_guard result positiv) ) /\ ( (Functions__positives___axiom.dynamic_invariant result True False True True) /\ (forall i   "model" "name:I" "model_trace:3059"  : int.
   ( ( ((Functions__positives.first result) <= i) /\ (i <= (Functions__positives.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array result) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array positiv) i)) * ( -1 ))) )) ) ) }
 
 axiom positiveornegativevector__post_axiom :
  (forall positiv   : Functions__positives.positives [(Functions__positiveornegativevector.positiveornegativevector positiv)].
   ( ( (Functions__positives___axiom.dynamic_invariant positiv True True True True) /\ (forall i   "model" "name:I" "model_trace:3039"  : int.
    ( ( ((Functions__positives.first positiv) <= i) /\ (i <= (Functions__positives.last positiv)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array positiv) i)) > ( -2147483648 )) )) ) -> (let result = (Functions__positiveornegativevector.positiveornegativevector positiv) in (
    (if ((Functions__positiveornegativevector.positiveornegativevector__function_guard result positiv)) then (
     ( ( (forall i   "model" "name:I" "model_trace:3059"  : int.
      ( ( ((Functions__positives.first result) <= i) /\ (i <= (Functions__positives.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array result) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array positiv) i)) * ( -1 ))) )) /\ (Functions__positives___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "multvector" defined at functions.ads:54, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Functions__multvector___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        Standard__positive
 use        Standard__positive___axiom
 use        Standard__positive__rep
 use        Functions__multvector
 use        Array__Int__Standard__positive
 use        Functions__v_vector___axiom
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive

 val multvector 
   (vector : Array__Int__Standard__positive.map) : int
  requires {  ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 2)) < (Int_Division.div 2147483647 (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 3)))) /\ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 1)) < (Int_Division.div 2147483647 ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 2)) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 3))))) ) }
  ensures {  ( ( (result = (Functions__multvector.multvector vector)) /\ (Functions__multvector.multvector__function_guard result vector) ) /\ ( (Standard__positive___axiom.dynamic_invariant result True False True True) /\ (result = (((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 1)) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 2))) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 3)))) ) ) }
 
 axiom multvector__post_axiom :
  (forall vector   : Array__Int__Standard__positive.map [(Functions__multvector.multvector vector)].
   ( ( (Functions__v_vector___axiom.dynamic_invariant vector True True True True) /\ ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 2)) < (Int_Division.div 2147483647 (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 3)))) /\ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 1)) < (Int_Division.div 2147483647 ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 2)) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 3))))) ) ) -> (let result = (Functions__multvector.multvector vector) in (
    (if ((Functions__multvector.multvector__function_guard result vector)) then (
     ( ( (result = (((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 1)) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 2))) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get vector 3)))) /\ (Standard__positive___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "midterm" defined at functions.ads:69, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Functions__midterm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive
 use        Standard__positive___axiom
 use        Standard__positive__rep
 use        Functions__b_binary
 use        Functions__midterm
 use        Array__Int__Standard__positive
 use        Functions__vector
 use        Functions__vector___axiom
 use        Array__Int__Bool
 use        Functions__b_binary___axiom
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Bool
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Bool

 val midterm 
   (values : Functions__vector.vector) (from : int) (to__ : int) : Functions__b_binary.b_binary
  requires {  ( (from <= to__) /\ ( ((Functions__vector.last values) < 2147483647) /\ ((Functions__vector.last values) > (Functions__vector.first values)) ) ) }
  ensures {  ( ( (result = (Functions__midterm.midterm values from to__)) /\ (Functions__midterm.midterm__function_guard result values from to__) ) /\ ( (Functions__b_binary___axiom.dynamic_invariant result True False True True) /\ (forall i   "model" "name:I" "model_trace:3260"  : int.
   ( ( ((Functions__vector.first values) <= i) /\ (i <= (Functions__vector.last values)) ) -> (if (((Array__Int__Bool.get (Functions__b_binary.to_array result) i) = True)) then (
    ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array values) i)) >= from) /\ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array values) i)) <= to__) )) else (
    ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array values) i)) <= from) \/ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array values) i)) >= to__) ))) )) ) ) }
 
 axiom midterm__post_axiom :
  (forall values   : Functions__vector.vector.
  (forall from   to__   : int [(Functions__midterm.midterm values from to__)].
   ( ( ( ( (Functions__vector___axiom.dynamic_invariant values True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( (from <= to__) /\ ( ((Functions__vector.last values) < 2147483647) /\ ((Functions__vector.last values) > (Functions__vector.first values)) ) ) ) -> (let result = (Functions__midterm.midterm values from to__) in (
    (if ((Functions__midterm.midterm__function_guard result values from to__)) then (
     ( ( (forall i   "model" "name:I" "model_trace:3260"  : int.
      ( ( ((Functions__vector.first values) <= i) /\ (i <= (Functions__vector.last values)) ) -> (if (((Array__Int__Bool.get (Functions__b_binary.to_array result) i) = True)) then (
       ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array values) i)) >= from) /\ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array values) i)) <= to__) )) else (
       ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array values) i)) <= from) \/ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array values) i)) >= to__) ))) )) /\ (Functions__b_binary___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    )))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "functions" defined at functions.ads:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Functions__package_def
 use import "_gnatprove_standard".Main

 let def #"functions.ads" 2 0 0#"GP_Subp:functions.ads:2" "W:diverges:N" 
   (__void_param : unit)
  requires { #"functions.ads" 2 0 0# true }
  ensures { #"functions.ads" 2 0 0# true }
   =
  ( (#"functions.ads" 2 0 0# ());
  (#"functions.ads" 4 0 0# ());
  (#"functions.ads" 6 0 0# ());
  (#"functions.ads" 15 0 0# ());
  (#"functions.ads" 11 0 0# ());
  (#"functions.ads" 12 0 0# ());
  (#"functions.ads" 11 0 0# ());
  (#"functions.ads" 9 0 0# ());
  (#"functions.ads" 20 0 0# ());
  (#"functions.ads" 21 0 0# ());
  (#"functions.ads" 23 0 0# ());
  (#"functions.ads" 29 0 0# ());
  (#"functions.ads" 26 0 0# ());
  (#"functions.ads" 39 0 0# ());
  (#"functions.ads" 47 0 0# ());
  (#"functions.ads" 44 0 0# ());
  (#"functions.ads" 42 0 0# ());
  (#"functions.ads" 54 0 0# ());
  (#"functions.ads" 60 0 0# ());
  (#"functions.ads" 57 0 0# ());
  (#"functions.ads" 57 0 0# ());
  (#"functions.ads" 66 0 0# ());
  (#"functions.ads" 67 0 0# ());
  (#"functions.ads" 69 0 0# ());
  (#"functions.ads" 78 0 0# ());
  (#"functions.ads" 74 0 0# ());
  (#"functions.ads" 75 0 0# ());
  (#"functions.ads" 73 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.ads" 71 0 0# ());
  (#"functions.adb" 1 0 0# ());
  (#"functions.adb" 3 0 0# ());
  (#"functions.adb" 20 0 0# ());
  (#"functions.adb" 29 0 0# ());
  (#"functions.adb" 43 0 0# ());
  (#"functions.adb" 63 0 0# ());
  ( "GP_Sloc:functions.adb:83:1" (#"functions.adb" 83 0 0# ()) ) )
end

(* Module for defining the value of the aggregate at functions.adb:6, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Functions__sucesion__result__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__positive
 use        Functions__t_sucesion
 use        Array__Int__Standard__natural
 use        Functions__sucesion__T2b
 use        Functions__sucesion__result__aggregate_def
 use        Array__Int__Standard__natural

 axiom def_axiom :
  (forall temp___255   temp___256   temp___257   : int.
   (let temp___254 = (Functions__sucesion__result__aggregate_def.functions__sucesion__result__aggregate_def temp___255 temp___256 temp___257) in (
    (if ((Standard__natural___axiom.dynamic_invariant temp___255 True True True True)) then (
     ( (if ((Functions__t_sucesion.dynamic_property Standard__positive.first Standard__positive.last temp___256 temp___257)) then (
      ( ((Functions__sucesion__T2b.first temp___254) = temp___256) /\ ((Functions__sucesion__T2b.last temp___254) = temp___257) )) else true) /\ (forall temp___258   : int.
      ((Array__Int__Standard__natural.get (Functions__sucesion__T2b.to_array temp___254) temp___258) = ( 0 : Standard__natural.natural ))) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "sucesion" defined at functions.ads:6, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Functions__sucesion__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__natural
 use        Standard__natural___axiom
 use        Standard__natural__rep
 use        Standard__positive
 use        Standard__positive___axiom
 use        Standard__integer__rep
 use        Functions__t_sucesion
 use        Array__Int__Standard__natural
 use        Functions__sucesion__n_elements
 use        Functions__sucesion__by
 use        Functions__sucesion__TresultS
 use        Functions__sucesion__T2b
 use        Array__Int__Standard__natural
 use        Functions__sucesion__result
 use        Functions__sucesion__L_1
 use        Functions__sucesion__L_1__T3b
 use        Functions__sucesion__L_1__i
 use        Functions__sucesion__result__aggregate_def
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Array__Int__Standard__natural
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Functions__sucesion__result___axiom
 use        Functions__sucesion__result__aggregate_def___axiom
 use        Functions__sucesion__L_1__i___axiom
 use        Functions__sucesion__L_1___axiom
 use        Functions__t_sucesion___axiom
 use        Functions__sucesion__n_elements___axiom
 use        Functions__sucesion__by___axiom
 use        Functions__sucesion__TresultS___axiom
 use        Functions__sucesion__TTresultSP1___axiom
 use        Functions__sucesion__T1b___axiom
 use        Functions__sucesion__T2b___axiom
 use        Functions__sucesion__L_1__T3b___axiom

 val functions__sucesion__result "model_projected" "model_trace:2836@result" "name:Sucesion"  : Functions__t_sucesion.t_sucesion__ref 
 
 let def #"functions.ads" 6 0 0#"W:diverges:N" "GP_Subp:functions.ads:6" 
   (__void_param : unit)
  requires { #"functions.ads" 6 0 0# true }
  ensures { #"functions.ads" 6 0 0# (#"functions.ads" 15 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:functions.ads:15:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:10" "comment:     Post => (for all J in 1 .. N_Elements => Sucesion'Result (J) = J*By);
             ^ functions.ads:15:14:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall j #"functions.ads" 15 0 0#  "model" "model_trace:2903" "name:J"  : int.
   ( ( (1 <= j) /\ (j <= Functions__sucesion__n_elements.n_elements) ) -> ( "GP_Pretty_Ada:2920" "GP_Sloc:functions.ads:15:47" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Functions__t_sucesion.to_array functions__sucesion__result.Functions__t_sucesion.t_sucesion__content) j)) = (j * Functions__sucesion__by.by__)) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram functions.ads:6 *)
  ;
   assume {  (Standard__positive___axiom.dynamic_invariant Functions__sucesion__n_elements.n_elements True False True True) };
   assume {  (Standard__natural___axiom.dynamic_invariant Functions__sucesion__by.by__ True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram functions.ads:6 *)
  ;
  () (* Check for RTE in the Pre of the subprogram functions.ads:6 *)
  ;
   abstract ensures {true}(let _ = ( (Functions__sucesion__n_elements.n_elements < 2147483647) && ( (Functions__sucesion__by.by__ < 2147483647) && (Functions__sucesion__by.by__ < (#"functions.ads" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:functions.ads:13:33" "GP_Reason:VC_DIVISION_CHECK" "GP_Id:9" "comment:     and then By < Positive'Last/N_Elements,
                                ^ functions.ads:13:33:VC_DIVISION_CHECK" "GP_Shape:pragargs__cmp__div" (Int_Division.div_(2147483647) (Functions__sucesion__n_elements.n_elements)) ))) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram functions.ads:6 *)
  ;
   assume {  ( (Functions__sucesion__n_elements.n_elements < 2147483647) /\ ( (Functions__sucesion__by.by__ < 2147483647) /\ (Functions__sucesion__by.by__ < (Int_Division.div 2147483647 Functions__sucesion__n_elements.n_elements)) ) ) };
   try
   ( (#"functions.adb" 6 0 0# ( #"functions.adb" 6 0 0# abstract ensures {true}(let _ = Functions__sucesion__n_elements.n_elements in (
    ()))
    end ;
   (#"functions.adb" 6 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Sloc:functions.adb:6:7" "GP_Reason:VC_RANGE_CHECK" "GP_Id:0" "comment:      Result : T_Sucesion (1 .. N_Elements) := (others => 0);
      ^ functions.adb:6:7:VC_RANGE_CHECK" #"functions.adb" 6 0 0# (any unit
   requires {#"functions.adb" 6 0 0# ( (1 <= Functions__sucesion__n_elements.n_elements) -> ( (1 >= Standard__positive.first) /\ (Functions__sucesion__n_elements.n_elements <= Standard__positive.last) ) )} 
   ensures {#"functions.adb" 6 0 0# true} 
   ) )) ));
   (#"functions.adb" 6 0 0# ( (let functions__sucesion__result__assume = (let temp___260 = (let temp___259 = (Functions__sucesion__result__aggregate_def.functions__sucesion__result__aggregate_def(0) (1) (Functions__sucesion__n_elements.n_elements)) in (
    ( #"functions.adb" 6 0 0# assume { #"functions.adb" 6 0 0# ((Functions__sucesion__T2b.first temp___259) = 1) };
    #"functions.adb" 6 0 0# assume { #"functions.adb" 6 0 0# ((Functions__sucesion__T2b.last temp___259) = Functions__sucesion__n_elements.n_elements) };
    temp___259 )))
    in (
    ( #"functions.adb" 6 0 0# assert { #"functions.adb" 6 0 0# (#"functions.adb" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:functions.adb:6:48" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:1" "comment:      Result : T_Sucesion (1 .. N_Elements) := (others => 0);
                                               ^ functions.adb:6:48:VC_LENGTH_CHECK" "GP_Shape:result_decl__aggr" ((if (((Functions__sucesion__T2b.first(temp___260)) <= (Functions__sucesion__T2b.last(temp___260)))) then (
     (((Functions__sucesion__T2b.last(temp___260)) - (Functions__sucesion__T2b.first(temp___260))) + 1)) else (
     0)) = (if ((1 <= Functions__sucesion__n_elements.n_elements)) then (
     ((Functions__sucesion__n_elements.n_elements - 1) + 1)) else (
     0))) )) };
    (Functions__sucesion__TresultS.of_array((Functions__sucesion__T2b.to_array(temp___260))) ((Functions__sucesion__T2b.first(temp___260))) ((Functions__sucesion__T2b.last(temp___260)))) )))
    in (
    (  Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content <- ( (Functions__sucesion__TresultS.to_array(functions__sucesion__result__assume)) );
     assume {  ((Standard__integer__rep.to_rep(Functions__sucesion__result.result____first)) = (Functions__sucesion__TresultS.first(functions__sucesion__result__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Functions__sucesion__result.result____last)) = (Functions__sucesion__TresultS.last(functions__sucesion__result__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Functions__sucesion__TresultS.dynamic_property 1 Functions__sucesion__n_elements.n_elements (Standard__integer__rep.to_rep Functions__sucesion__result.result____first) (Standard__integer__rep.to_rep Functions__sucesion__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Functions__sucesion__result.result____first) = 1) /\ ((Standard__integer__rep.to_rep Functions__sucesion__result.result____last) = Functions__sucesion__n_elements.n_elements) ) ))) } ));
   (#"functions.adb" 9 0 0# ());
   ( "GP_Sloc:functions.adb:9:32" (#"functions.adb" 9 0 0# (let temp___262 = 1 in (
   (let temp___263 = Functions__sucesion__n_elements.n_elements in (
    ( #"functions.adb" 9 0 0# Functions__sucesion__L_1__i.i.int__content <- ( temp___262 );
    () (* Translation of an Ada loop from functions.adb:9 *)
    ;
    (if ((Boolean.andb((temp___262 <= Functions__sucesion__L_1__i.i.int__content)) ((Functions__sucesion__L_1__i.i.int__content <= temp___263)))) then (
     #"functions.adb" 9 0 0# try
      ( #"functions.adb" 9 0 0# abstract ensures {true}(let _ = Functions__sucesion__L_1__i.i.int__content in (
       ()))
       end ;
      (let temp___267 = #"functions.adb" 9 0 0# (any int
      ensures {#"functions.adb" 9 0 0# (result = Functions__sucesion__L_1__i.i.int__content)} 
      ) in (
       ( #"functions.adb" 9 0 0# abstract ensures {true}(let _ = Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content in (
        ()))
        end ;
       (let temp___265 = #"functions.adb" 9 0 0# (any Array__Int__Standard__natural.map
       ensures {#"functions.adb" 9 0 0# (result = Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop functions.adb:9 *)
        ;
        ( "GP_Sloc:functions.adb:10:10" (#"functions.adb" 10 0 0# ()) );
        ( "GP_Sloc:functions.adb:10:21" (#"functions.adb" 10 0 0# #"functions.adb" 10 0 0# Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content) (Functions__sucesion__L_1__i.i.int__content) ((Standard__natural__rep.of_rep((#"functions.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:functions.adb:10:27" "GP_Shape:L_1_while__result_assign__mult" "GP_Id:3" "comment:         Result (I) := By * I;
                          ^ functions.adb:10:27:VC_RANGE_CHECK" (Standard__natural.range_check_((#"functions.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:functions.adb:10:27" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:2" "comment:         Result (I) := By * I;
                          ^ functions.adb:10:27:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__result_assign__mult" (Standard__integer.range_check_((Functions__sucesion__by.by__ * Functions__sucesion__L_1__i.i.int__content))) )))) )))))) )) );
        () (* While loop translating the Ada loop from functions.adb:9 *)
        ;
         while True do
         invariant { 
          (#"functions.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:functions.adb:13:13" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:6" "comment:           (for all J in 1..I => Result (J) = (By*J));
            ^ functions.adb:13:13:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall j #"functions.adb" 13 0 0#  "model" "name:J" "model_trace:2381"  : int.
           ( ( (1 <= j) /\ (j <= Functions__sucesion__L_1__i.i.int__content) ) -> ( "GP_Pretty_Ada:2395" "GP_Sloc:functions.adb:13:34" ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content j)) = (Functions__sucesion__by.by__ * j)) ) )) ))
          }
         ( () (* Assume implicit invariants from the loop functions.adb:9 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (True) then (
          true) else (
          ( (Functions__sucesion__TresultS.dynamic_property 1 Functions__sucesion__n_elements.n_elements (Standard__integer__rep.to_rep Functions__sucesion__result.result____first) (Standard__integer__rep.to_rep Functions__sucesion__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Functions__sucesion__result.result____first) = 1) /\ ((Standard__integer__rep.to_rep Functions__sucesion__result.result____last) = Functions__sucesion__n_elements.n_elements) ) ))) ) /\ (forall temp___266   : int.
          (if (( ((Standard__integer__rep.to_rep Functions__sucesion__result.result____first) <= temp___266) /\ (temp___266 <= (Standard__integer__rep.to_rep Functions__sucesion__result.result____last)) )) then (
           (if (( (temp___263 < temp___266) \/ ( (temp___266 < temp___262) \/ (Functions__sucesion__L_1__i.i.int__content < temp___266) ) )) then (
            ((Array__Int__Standard__natural.get Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content temp___266) = (Array__Int__Standard__natural.get temp___265 temp___266))) else (
            true))) else true)) ) /\ (if ((1 <= Functions__sucesion__n_elements.n_elements)) then (
          (Functions__sucesion__L_1__T3b.dynamic_property 1 Functions__sucesion__n_elements.n_elements Functions__sucesion__L_1__i.i.int__content)) else true) ) /\ true )) (( (1 <= Functions__sucesion__L_1__i.i.int__content) /\ (Functions__sucesion__L_1__i.i.int__content <= Functions__sucesion__n_elements.n_elements) ))) };
         () (* Check for absence of RTE in the invariant of loop functions.adb:9 *)
         ;
          abstract ensures {true}(let _ = ( (let j =  (any int
         ) in (
          (if ((Boolean.andb((1 <= j)) ((j <= Functions__sucesion__L_1__i.i.int__content)))) then (
            abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get(Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content) ((  assert {  (#"functions.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:functions.adb:13:42" "GP_Reason:VC_INDEX_CHECK" "GP_Id:4" "comment:           (for all J in 1..I => Result (J) = (By*J));
                                         ^ functions.adb:13:42:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Functions__sucesion__result.result____first) <= j) /\ (j <= (Standard__integer__rep.to_rep Functions__sucesion__result.result____last)) ) )) };
           j ))))) = (#"functions.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:13:50" "GP_Id:5" "comment:           (for all J in 1..I => Result (J) = (By*J));
                                                 ^ functions.adb:13:50:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__mult" (Standard__integer.range_check_((Functions__sucesion__by.by__ * j))) ))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2381"  : int.
          ( ( (1 <= j) /\ (j <= Functions__sucesion__L_1__i.i.int__content) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content j)) = (Functions__sucesion__by.by__ * j)) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop functions.adb:9 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop functions.adb:9 *)
         ;
         (if ((Functions__sucesion__L_1__i.i.int__content = temp___263)) then (
           raise Functions__sucesion__L_1.L_1));
          Functions__sucesion__L_1__i.i.int__content <- ( (Functions__sucesion__L_1__i.i.int__content + 1) );
         ( "GP_Sloc:functions.adb:10:10" (#"functions.adb" 10 0 0# ()) );
         ( "GP_Sloc:functions.adb:10:21" (#"functions.adb" 10 0 0# #"functions.adb" 10 0 0# Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content <- ( (Array__Int__Standard__natural.set(Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content) (Functions__sucesion__L_1__i.i.int__content) ((Standard__natural__rep.of_rep((#"functions.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:functions.adb:10:27" "GP_Shape:L_1_while__result_assign__mult" "GP_Id:3" "comment:         Result (I) := By * I;
                          ^ functions.adb:10:27:VC_RANGE_CHECK" (Standard__natural.range_check_((#"functions.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:functions.adb:10:27" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:2" "comment:         Result (I) := By * I;
                          ^ functions.adb:10:27:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__result_assign__mult" (Standard__integer.range_check_((Functions__sucesion__by.by__ * Functions__sucesion__L_1__i.i.int__content))) )))) )))))) )) ) )
        done )))
        )))
       )
     with
      Functions__sucesion__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:functions.adb:16:14" (#"functions.adb" 16 0 0# ()) );
   ( "GP_Sloc:functions.adb:16:7" (#"functions.adb" 16 0 0# ( #"functions.adb" 16 0 0# functions__sucesion__result.Functions__t_sucesion.t_sucesion__content <- ( (Functions__t_sucesion.of_array(Functions__sucesion__result.result__.Array__Int__Standard__natural.map__content) ((Standard__integer__rep.to_rep(Functions__sucesion__result.result____first))) ((Standard__integer__rep.to_rep(Functions__sucesion__result.result____last)))) );
   #"functions.adb" 16 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let j =  (any int
  ) in (
   (if ((Boolean.andb((1 <= j)) ((j <= Functions__sucesion__n_elements.n_elements)))) then (
     abstract ensures {true}(let _ = ((Standard__natural__rep.to_rep((Array__Int__Standard__natural.get((Functions__t_sucesion.to_array(functions__sucesion__result.Functions__t_sucesion.t_sucesion__content))) ((  assert {  (#"functions.ads" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.ads:15:64" "GP_Id:7" "comment:     Post => (for all J in 1 .. N_Elements => Sucesion'Result (J) = J*By);
                                                               ^ functions.ads:15:64:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" ( ((Functions__t_sucesion.first functions__sucesion__result.Functions__t_sucesion.t_sucesion__content) <= j) /\ (j <= (Functions__t_sucesion.last functions__sucesion__result.Functions__t_sucesion.t_sucesion__content)) ) )) };
    j ))))) = (#"functions.ads" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.ads:15:70" "GP_Id:8" "comment:     Post => (for all J in 1 .. N_Elements => Sucesion'Result (J) = J*By);
                                                                     ^ functions.ads:15:70:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__cmp__mult" (Standard__integer.range_check_((j * Functions__sucesion__by.by__))) ))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "model_trace:2903" "name:J"  : int.
   ( ( (1 <= j) /\ (j <= Functions__sucesion__n_elements.n_elements) ) -> ((Standard__natural__rep.to_rep (Array__Int__Standard__natural.get (Functions__t_sucesion.to_array functions__sucesion__result.Functions__t_sucesion.t_sucesion__content) j)) = (j * Functions__sucesion__by.by__)) )) )} 
  ) ) in (
   ()))
   end ;
  functions__sucesion__result.Functions__t_sucesion.t_sucesion__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "positiveornegative" defined at functions.ads:23, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Functions__positiveornegative__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer___axiom
 use        Functions__positiveornegative__num
 use        Standard__integer___axiom
 use        Functions__positiveornegative__num___axiom

 val functions__positiveornegative__result "model_projected" "model_trace:2949@result" "name:PositiveOrNegative"  : bool__ref 
 
 let def #"functions.ads" 23 0 0#"W:diverges:N" "GP_Subp:functions.ads:23" 
   (__void_param : unit)
  requires { #"functions.ads" 23 0 0# true }
  ensures { #"functions.ads" 23 0 0# (#"functions.ads" 29 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:functions.ads:29:14" "GP_Id:11" "comment:     Post => (if Num >= 0 then
             ^ functions.ads:29:14:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( (if ((Functions__positiveornegative__num.num >= 0)) then (
   ( "GP_Pretty_Ada:2993" "GP_Sloc:functions.ads:30:17" ( (functions__positiveornegative__result.bool__content = True) <-> true ) )) else (
   ( "GP_Pretty_Ada:3968" "GP_Sloc:functions.ads:29:15" true ))) /\ (if ((Functions__positiveornegative__num.num < 0)) then (
   ( "GP_Pretty_Ada:3003" "GP_Sloc:functions.ads:32:13" ( (functions__positiveornegative__result.bool__content = True) <-> false ) )) else (
   ( "GP_Pretty_Ada:3970" "GP_Sloc:functions.ads:31:11" true ))) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram functions.ads:23 *)
  ;
   assume {  (Standard__integer___axiom.dynamic_invariant Functions__positiveornegative__num.num True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram functions.ads:23 *)
  ;
  () (* Check for RTE in the Pre of the subprogram functions.ads:23 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Functions__positiveornegative__num.num < 2147483647)) ((Functions__positiveornegative__num.num > ( -2147483648 )))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram functions.ads:23 *)
  ;
   assume {  ( (Functions__positiveornegative__num.num < 2147483647) /\ (Functions__positiveornegative__num.num > ( -2147483648 )) ) };
   try
   ( ( "GP_Sloc:functions.adb:22:7" (#"functions.adb" 22 0 0# (if ((Functions__positiveornegative__num.num >= 0)) then (
    ( "GP_Sloc:functions.adb:23:10" (#"functions.adb" 23 0 0# ( #"functions.adb" 23 0 0# functions__positiveornegative__result.bool__content <- ( (Boolean.of_int(1)) );
    #"functions.adb" 23 0 0# raise Return__exc )) )) else (
    ( "GP_Sloc:functions.adb:25:10" (#"functions.adb" 25 0 0# ( #"functions.adb" 25 0 0# functions__positiveornegative__result.bool__content <- ( (Boolean.of_int(0)) );
    #"functions.adb" 25 0 0# raise Return__exc )) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((if ((Functions__positiveornegative__num.num >= 0)) then (
   ((Boolean.to_int(functions__positiveornegative__result.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) else (
   (Boolean.of_int(1))))) ((if ((Functions__positiveornegative__num.num < 0)) then (
   ((Boolean.to_int(functions__positiveornegative__result.bool__content)) = (Boolean.to_int((Boolean.of_int(0)))))) else (
   (Boolean.of_int(1)))))) in (
   ()))
   end ;
  functions__positiveornegative__result.bool__content )
end

(* Module for defining the value of the aggregate at functions.adb:30, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Functions__positiveornegativevector__resarray__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive
 use        Functions__positives
 use        Array__Int__Standard__integer
 use        Functions__positiveornegativevector__T13b
 use        Functions__positiveornegativevector__resarray__aggregate_def
 use        Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___270   temp___271   temp___272   : int.
   (let temp___269 = (Functions__positiveornegativevector__resarray__aggregate_def.functions__positiveornegativevector__resarray__aggregate_def temp___270 temp___271 temp___272) in (
    (if ((Standard__integer___axiom.dynamic_invariant temp___270 True True True True)) then (
     ( (if ((Functions__positives.dynamic_property Standard__positive.first Standard__positive.last temp___271 temp___272)) then (
      ( ((Functions__positiveornegativevector__T13b.first temp___269) = temp___271) /\ ((Functions__positiveornegativevector__T13b.last temp___269) = temp___272) )) else true) /\ (forall temp___273   : int.
      ((Array__Int__Standard__integer.get (Functions__positiveornegativevector__T13b.to_array temp___269) temp___273) = ( 0 : Standard__integer.integer ))) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "positiveornegativevector" defined at functions.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Functions__positiveornegativevector__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__positive
 use        Standard__integer__rep
 use        Functions__positives
 use        Array__Int__Standard__integer
 use        Functions__positives___axiom
 use        Functions__positiveornegativevector__positiv
 use        Functions__positiveornegativevector__TresarrayS
 use        Functions__positiveornegativevector__T13b
 use        Array__Int__Standard__integer
 use        Functions__positiveornegativevector__resarray
 use        Functions__positiveornegativevector__L_2
 use        Functions__positiveornegativevector__L_2__T14b
 use        Functions__positiveornegativevector__L_2__i
 use        Functions__positiveornegativevector__resarray__aggregate_def
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Functions__positiveornegativevector__resarray___axiom
 use        Functions__positiveornegativevector__resarray__aggregate_def___axiom
 use        Functions__positiveornegativevector__L_2__i___axiom
 use        Functions__positiveornegativevector__L_2___axiom
 use        Functions__positives___axiom
 use        Functions__positiveornegativevector__positiv___axiom
 use        Functions__positiveornegativevector__TresarrayS___axiom
 use        Functions__positiveornegativevector__TTresarraySP1___axiom
 use        Functions__positiveornegativevector__T12b___axiom
 use        Functions__positiveornegativevector__T13b___axiom
 use        Functions__positiveornegativevector__L_2__T14b___axiom

 val functions__positiveornegativevector__result "model_projected" "model_trace:3005@result" "name:PositiveOrNegativeVector"  : Functions__positives.positives__ref 
 
 let def #"functions.ads" 39 0 0#"W:diverges:N" "GP_Subp:functions.ads:39" 
   (__void_param : unit)
  requires { #"functions.ads" 39 0 0# true }
  ensures { #"functions.ads" 39 0 0# (#"functions.ads" 47 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:functions.ads:47:14" "GP_Id:24" "comment:     Post => (for all I in PositiveOrNegativeVector'Result'Range =>
             ^ functions.ads:47:14:VC_POSTCONDITION" (forall i #"functions.ads" 47 0 0#  "model" "name:I" "model_trace:3059"  : int.
   ( ( ((Functions__positives.first functions__positiveornegativevector__result.Functions__positives.positives__content) <= i) /\ (i <= (Functions__positives.last functions__positiveornegativevector__result.Functions__positives.positives__content)) ) -> ( "GP_Pretty_Ada:3077" "GP_Sloc:functions.ads:48:17" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array functions__positiveornegativevector__result.Functions__positives.positives__content) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array Functions__positiveornegativevector__positiv.positiv) i)) * ( -1 ))) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram functions.ads:39 *)
  ;
   assume {  (Functions__positives___axiom.dynamic_invariant Functions__positiveornegativevector__positiv.positiv True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram functions.ads:39 *)
  ;
  () (* Check for RTE in the Pre of the subprogram functions.ads:39 *)
  ;
   abstract ensures {true}(let _ = ( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Functions__positiveornegativevector__positiv.positiv in (
    ()))
    end ;
   (Functions__positives.first(Functions__positiveornegativevector__positiv.positiv)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Functions__positiveornegativevector__positiv.positiv in (
    ()))
    end ;
   (Functions__positives.last(Functions__positiveornegativevector__positiv.positiv)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Functions__positives.to_array(Functions__positiveornegativevector__positiv.positiv))) ((  assert {  (#"functions.ads" 45 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" "GP_Sloc:functions.ads:45:24" "GP_Id:23" "comment:               Positiv(I) > Integer'First),
                       ^ functions.ads:45:24:VC_INDEX_CHECK" ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= i) /\ (i <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) )) };
    i ))))) > ( -2147483648 )) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:3039"  : int.
   ( ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= i) /\ (i <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array Functions__positiveornegativevector__positiv.positiv) i)) > ( -2147483648 )) )) )} 
  ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram functions.ads:39 *)
  ;
   assume {  (forall i   "model" "name:I" "model_trace:3039"  : int.
   ( ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= i) /\ (i <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array Functions__positiveornegativevector__positiv.positiv) i)) > ( -2147483648 )) )) };
   try
   ( (#"functions.adb" 29 0 0# ());
   (#"functions.adb" 30 0 0# (#"functions.adb" 30 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:functions.adb:30:7" "GP_Id:12" "comment:      ResArray : Positives (Positiv'Range) := (others=>0);
      ^ functions.adb:30:7:VC_RANGE_CHECK" #"functions.adb" 30 0 0# (any unit
   requires {#"functions.adb" 30 0 0# ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) -> ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) >= Standard__positive.first) /\ ((Functions__positives.last Functions__positiveornegativevector__positiv.positiv) <= Standard__positive.last) ) )} 
   ensures {#"functions.adb" 30 0 0# true} 
   ) )));
   (#"functions.adb" 30 0 0# ( (let functions__positiveornegativevector__resarray__assume = (let temp___275 = (let temp___274 = (Functions__positiveornegativevector__resarray__aggregate_def.functions__positiveornegativevector__resarray__aggregate_def(0) ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv)) ((Functions__positives.last Functions__positiveornegativevector__positiv.positiv))) in (
    ( #"functions.adb" 30 0 0# assume { #"functions.adb" 30 0 0# ((Functions__positiveornegativevector__T13b.first temp___274) = (Functions__positives.first Functions__positiveornegativevector__positiv.positiv)) };
    #"functions.adb" 30 0 0# assume { #"functions.adb" 30 0 0# ((Functions__positiveornegativevector__T13b.last temp___274) = (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) };
    temp___274 )))
    in (
    ( #"functions.adb" 30 0 0# assert { #"functions.adb" 30 0 0# (#"functions.adb" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Sloc:functions.adb:30:47" "GP_Id:13" "comment:      ResArray : Positives (Positiv'Range) := (others=>0);
                                              ^ functions.adb:30:47:VC_LENGTH_CHECK" "GP_Shape:resarray_decl__aggr" ((if (((Functions__positiveornegativevector__T13b.first(temp___275)) <= (Functions__positiveornegativevector__T13b.last(temp___275)))) then (
     (((Functions__positiveornegativevector__T13b.last(temp___275)) - (Functions__positiveornegativevector__T13b.first(temp___275))) + 1)) else (
     0)) = (if (((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv))) then (
     (((Functions__positives.last Functions__positiveornegativevector__positiv.positiv) - (Functions__positives.first Functions__positiveornegativevector__positiv.positiv)) + 1)) else (
     0))) )) };
    (Functions__positiveornegativevector__TresarrayS.of_array((Array__Int__Standard__integer.slide((Functions__positiveornegativevector__T13b.to_array(temp___275))) ((Functions__positiveornegativevector__T13b.first(temp___275))) ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv)))) ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv)) ((Functions__positives.last Functions__positiveornegativevector__positiv.positiv))) )))
    in (
    (  Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content <- ( (Functions__positiveornegativevector__TresarrayS.to_array(functions__positiveornegativevector__resarray__assume)) );
     assume {  ((Standard__integer__rep.to_rep(Functions__positiveornegativevector__resarray.resarray__first)) = (Functions__positiveornegativevector__TresarrayS.first(functions__positiveornegativevector__resarray__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Functions__positiveornegativevector__resarray.resarray__last)) = (Functions__positiveornegativevector__TresarrayS.last(functions__positiveornegativevector__resarray__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Functions__positiveornegativevector__TresarrayS.dynamic_property (Functions__positives.first Functions__positiveornegativevector__positiv.positiv) (Functions__positives.last Functions__positiveornegativevector__positiv.positiv) (Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__first) (Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__last)) /\ ( ((Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__first) = (Functions__positives.first Functions__positiveornegativevector__positiv.positiv)) /\ ((Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__last) = (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) ))) } ));
   (#"functions.adb" 32 0 0# ());
   ( "GP_Sloc:functions.adb:32:30" (#"functions.adb" 32 0 0# (let temp___277 = ( #"functions.adb" 32 0 0# abstract ensures {true}(let _ = Functions__positiveornegativevector__positiv.positiv in (
    ()))
    end ;
   (Functions__positives.first(Functions__positiveornegativevector__positiv.positiv)) ) in (
   (let temp___278 = ( #"functions.adb" 32 0 0# abstract ensures {true}(let _ = Functions__positiveornegativevector__positiv.positiv in (
    ()))
    end ;
   (Functions__positives.last(Functions__positiveornegativevector__positiv.positiv)) ) in (
    ( #"functions.adb" 32 0 0# Functions__positiveornegativevector__L_2__i.i.int__content <- ( temp___277 );
    () (* Translation of an Ada loop from functions.adb:32 *)
    ;
    (if ((Boolean.andb((temp___277 <= Functions__positiveornegativevector__L_2__i.i.int__content)) ((Functions__positiveornegativevector__L_2__i.i.int__content <= temp___278)))) then (
     #"functions.adb" 32 0 0# try
      ( #"functions.adb" 32 0 0# abstract ensures {true}(let _ = Functions__positiveornegativevector__L_2__i.i.int__content in (
       ()))
       end ;
      (let temp___282 = #"functions.adb" 32 0 0# (any int
      ensures {#"functions.adb" 32 0 0# (result = Functions__positiveornegativevector__L_2__i.i.int__content)} 
      ) in (
       ( #"functions.adb" 32 0 0# abstract ensures {true}(let _ = Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content in (
        ()))
        end ;
       (let temp___280 = #"functions.adb" 32 0 0# (any Array__Int__Standard__integer.map
       ensures {#"functions.adb" 32 0 0# (result = Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop functions.adb:32 *)
        ;
        ( "GP_Sloc:functions.adb:33:10" (#"functions.adb" 33 0 0# ()) );
        ( "GP_Sloc:functions.adb:33:22" (#"functions.adb" 33 0 0# #"functions.adb" 33 0 0# Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content) (Functions__positiveornegativevector__L_2__i.i.int__content) ((Standard__integer__rep.of_rep((#"functions.adb" 33 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:33:36" "GP_Id:14" "comment:         ResArray(I) := Positiv(I) * (-1);
                                   ^ functions.adb:33:36:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__resarray_assign__mult" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Functions__positives.to_array(Functions__positiveornegativevector__positiv.positiv))) (Functions__positiveornegativevector__L_2__i.i.int__content)))) * ( -1 )))) )))))) )) );
        () (* While loop translating the Ada loop from functions.adb:32 *)
        ;
         while True do
         invariant { 
          (#"functions.adb" 36 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:functions.adb:36:13" "GP_Id:19" "comment:           ((for all J in Positiv'First .. I =>
            ^ functions.adb:36:13:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" (forall j #"functions.adb" 36 0 0#  "model" "name:J" "model_trace:2498"  : int.
           ( ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= j) /\ (j <= Functions__positiveornegativevector__L_2__i.i.int__content) ) -> ( "GP_Pretty_Ada:2514" "GP_Sloc:functions.adb:37:18" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content j)) = (- (1 * (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array Functions__positiveornegativevector__positiv.positiv) j))))) ) )) ))
          }
         ( () (* Assume implicit invariants from the loop functions.adb:32 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (True) then (
          true) else (
          ( (Functions__positiveornegativevector__TresarrayS.dynamic_property (Functions__positives.first Functions__positiveornegativevector__positiv.positiv) (Functions__positives.last Functions__positiveornegativevector__positiv.positiv) (Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__first) (Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__last)) /\ ( ((Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__first) = (Functions__positives.first Functions__positiveornegativevector__positiv.positiv)) /\ ((Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__last) = (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) ))) ) /\ (forall temp___281   : int.
          (if (( ((Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__first) <= temp___281) /\ (temp___281 <= (Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__last)) )) then (
           (if (( (temp___278 < temp___281) \/ ( (temp___281 < temp___277) \/ (Functions__positiveornegativevector__L_2__i.i.int__content < temp___281) ) )) then (
            ((Array__Int__Standard__integer.get Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content temp___281) = (Array__Int__Standard__integer.get temp___280 temp___281))) else (
            true))) else true)) ) /\ (if (((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv))) then (
          (Functions__positiveornegativevector__L_2__T14b.dynamic_property (Functions__positives.first Functions__positiveornegativevector__positiv.positiv) (Functions__positives.last Functions__positiveornegativevector__positiv.positiv) Functions__positiveornegativevector__L_2__i.i.int__content)) else true) ) /\ true )) (( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= Functions__positiveornegativevector__L_2__i.i.int__content) /\ (Functions__positiveornegativevector__L_2__i.i.int__content <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ))) };
         () (* Check for absence of RTE in the invariant of loop functions.adb:32 *)
         ;
          abstract ensures {true}(let _ = ( (let j =  (any int
         ) in (
          (if ((Boolean.andb(((  abstract ensures {true}(let _ = Functions__positiveornegativevector__positiv.positiv in (
           ()))
           end ;
          (Functions__positives.first(Functions__positiveornegativevector__positiv.positiv)) ) <= j)) ((j <= Functions__positiveornegativevector__L_2__i.i.int__content)))) then (
            abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content) ((  assert {  (#"functions.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.adb:37:28" "GP_Id:15" "comment:                 (ResArray(J) = -1 * Positiv(J))));
                           ^ functions.adb:37:28:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Functions__positiveornegativevector__resarray.resarray__last)) ) )) };
           j ))))) = (#"functions.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:37:33" "GP_Id:18" "comment:                 (ResArray(J) = -1 * Positiv(J))));
                                ^ functions.adb:37:33:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__minus" (Standard__integer.range_check_((-((#"functions.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:37:36" "GP_Id:17" "comment:                 (ResArray(J) = -1 * Positiv(J))));
                                   ^ functions.adb:37:36:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__minus__mult" (Standard__integer.range_check_((1 * (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Functions__positives.to_array(Functions__positiveornegativevector__positiv.positiv))) (( #"functions.adb" 37 0 0# assert { #"functions.adb" 37 0 0# (#"functions.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.adb:37:46" "GP_Id:16" "comment:                 (ResArray(J) = -1 * Positiv(J))));
                                             ^ functions.adb:37:46:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__minus__mult__ixdcomp" ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= j) /\ (j <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) )) };
           j )))))))) )))))) ))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2498"  : int.
          ( ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= j) /\ (j <= Functions__positiveornegativevector__L_2__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content j)) = (- (1 * (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array Functions__positiveornegativevector__positiv.positiv) j))))) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop functions.adb:32 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop functions.adb:32 *)
         ;
         (if ((Functions__positiveornegativevector__L_2__i.i.int__content = temp___278)) then (
           raise Functions__positiveornegativevector__L_2.L_2));
          Functions__positiveornegativevector__L_2__i.i.int__content <- ( (Functions__positiveornegativevector__L_2__i.i.int__content + 1) );
         ( "GP_Sloc:functions.adb:33:10" (#"functions.adb" 33 0 0# ()) );
         ( "GP_Sloc:functions.adb:33:22" (#"functions.adb" 33 0 0# #"functions.adb" 33 0 0# Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content) (Functions__positiveornegativevector__L_2__i.i.int__content) ((Standard__integer__rep.of_rep((#"functions.adb" 33 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:33:36" "GP_Id:14" "comment:         ResArray(I) := Positiv(I) * (-1);
                                   ^ functions.adb:33:36:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__resarray_assign__mult" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Functions__positives.to_array(Functions__positiveornegativevector__positiv.positiv))) (Functions__positiveornegativevector__L_2__i.i.int__content)))) * ( -1 )))) )))))) )) ) )
        done )))
        )))
       )
     with
      Functions__positiveornegativevector__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:functions.adb:39:14" (#"functions.adb" 39 0 0# ()) );
   ( "GP_Sloc:functions.adb:39:7" (#"functions.adb" 39 0 0# ( #"functions.adb" 39 0 0# functions__positiveornegativevector__result.Functions__positives.positives__content <- ( (Functions__positives.of_array(Functions__positiveornegativevector__resarray.resarray.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(Functions__positiveornegativevector__resarray.resarray__first))) ((Standard__integer__rep.to_rep(Functions__positiveornegativevector__resarray.resarray__last)))) );
   #"functions.adb" 39 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = functions__positiveornegativevector__result.Functions__positives.positives__content in (
    ()))
    end ;
   (Functions__positives.first(functions__positiveornegativevector__result.Functions__positives.positives__content)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = functions__positiveornegativevector__result.Functions__positives.positives__content in (
    ()))
    end ;
   (Functions__positives.last(functions__positiveornegativevector__result.Functions__positives.positives__content)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Functions__positives.to_array(functions__positiveornegativevector__result.Functions__positives.positives__content))) ((  assert {  (#"functions.ads" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" "GP_Sloc:functions.ads:48:49" "GP_Id:20" "comment:                PositiveOrNegativeVector'Result(I) = Positiv(I) * (-1));
                                                ^ functions.ads:48:49:VC_INDEX_CHECK" ( ((Functions__positives.first functions__positiveornegativevector__result.Functions__positives.positives__content) <= i) /\ (i <= (Functions__positives.last functions__positiveornegativevector__result.Functions__positives.positives__content)) ) )) };
    i ))))) = (#"functions.ads" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__cmp__mult" "GP_Sloc:functions.ads:48:65" "GP_Id:22" "comment:                PositiveOrNegativeVector'Result(I) = Positiv(I) * (-1));
                                                                ^ functions.ads:48:65:VC_OVERFLOW_CHECK" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Functions__positives.to_array(Functions__positiveornegativevector__positiv.positiv))) (( #"functions.ads" 48 0 0# assert { #"functions.ads" 48 0 0# (#"functions.ads" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.ads:48:62" "GP_Id:21" "comment:                PositiveOrNegativeVector'Result(I) = Positiv(I) * (-1));
                                                             ^ functions.ads:48:62:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__mult__ixdcomp" ( ((Functions__positives.first Functions__positiveornegativevector__positiv.positiv) <= i) /\ (i <= (Functions__positives.last Functions__positiveornegativevector__positiv.positiv)) ) )) };
    i ))))) * ( -1 )))) ))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:3059"  : int.
   ( ( ((Functions__positives.first functions__positiveornegativevector__result.Functions__positives.positives__content) <= i) /\ (i <= (Functions__positives.last functions__positiveornegativevector__result.Functions__positives.positives__content)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array functions__positiveornegativevector__result.Functions__positives.positives__content) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Functions__positives.to_array Functions__positiveornegativevector__positiv.positiv) i)) * ( -1 ))) )) )} 
  ) ) in (
   ()))
   end ;
  functions__positiveornegativevector__result.Functions__positives.positives__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "multvector" defined at functions.ads:54, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Functions__multvector__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__positive
 use        Standard__positive___axiom
 use        Standard__positive__rep
 use        Array__Int__Standard__positive
 use        Functions__v_vector___axiom
 use        Functions__multvector__vector
 use        Functions__multvector__res
 use        Functions__multvector__L_3
 use        Functions__multvector__L_3__T20b
 use        Functions__multvector__L_3__i
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Functions__multvector__res___axiom
 use        Functions__multvector__L_3__i___axiom
 use        Functions__multvector__L_3___axiom
 use        Functions__v_vector___axiom
 use        Functions__multvector__vector___axiom
 use        Functions__multvector__L_3__T20b___axiom

 val functions__multvector__result "model_projected" "model_trace:3083@result" "name:MultVector"  : int__ref 
 
 let def #"functions.ads" 54 0 0#"W:diverges:N" "GP_Subp:functions.ads:54" 
   (__void_param : unit)
  requires { #"functions.ads" 54 0 0# true }
  ensures { #"functions.ads" 54 0 0# (#"functions.ads" 61 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:functions.ads:61:8" "GP_Id:36" "comment:       MultVector'Result = Vector(Vector'First) * Vector(Vector'First + 1) * Vector(Vector'Last);
       ^ functions.ads:61:8:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:3697" "GP_Sloc:functions.ads:61:8" (functions__multvector__result.int__content = (((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 1)) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 2))) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 3)))) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram functions.ads:54 *)
  ;
   assume {  (Functions__v_vector___axiom.dynamic_invariant Functions__multvector__vector.vector True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram functions.ads:54 *)
  ;
  () (* Check for RTE in the Pre of the subprogram functions.ads:54 *)
  ;
   abstract ensures {true}(let _ = ( ((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (2)))) < (#"functions.ads" 57 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:pragargs__cmp__div" "GP_Sloc:functions.ads:57:39" "GP_Id:35" "comment:     Pre => Vector(2) < Positive'Last / Vector(3)
                                      ^ functions.ads:57:39:VC_DIVISION_CHECK" (Int_Division.div_(2147483647) ((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (3)))))) ))) && ((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (1)))) < (#"functions.ads" 58 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Shape:pragargs__cmp__div" "GP_Sloc:functions.ads:58:42" "GP_Id:34" "comment:     and then Vector(1) < (Positive'Last / (Vector(2) * Vector(3) )),
                                         ^ functions.ads:58:42:VC_DIVISION_CHECK" (Int_Division.div_(2147483647) ((#"functions.ads" 58 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.ads:58:55" "GP_Id:33" "comment:     and then Vector(1) < (Positive'Last / (Vector(2) * Vector(3) )),
                                                      ^ functions.ads:58:55:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__div__mult" (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (2)))) * (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (3))))))) )))) ))) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram functions.ads:54 *)
  ;
   assume {  ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 2)) < (Int_Division.div 2147483647 (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 3)))) /\ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 1)) < (Int_Division.div 2147483647 ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 2)) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 3))))) ) };
   try
   ( (#"functions.adb" 45 0 0# ( #"functions.adb" 45 0 0# Functions__multvector__res.res.int__content <- ( 1 );
   #"functions.adb" 45 0 0# assume { #"functions.adb" 45 0 0# (Standard__positive___axiom.dynamic_invariant Functions__multvector__res.res.int__content True False True True) } ));
   (#"functions.adb" 47 0 0# ());
   ( "GP_Sloc:functions.adb:47:44" (#"functions.adb" 47 0 0# (let temp___285 = 1 in (
   (let temp___286 = 3 in (
    ( #"functions.adb" 47 0 0# Functions__multvector__L_3__i.i.int__content <- ( temp___285 );
    () (* Translation of an Ada loop from functions.adb:47 *)
    ;
    (if ((Boolean.andb((temp___285 <= Functions__multvector__L_3__i.i.int__content)) ((Functions__multvector__L_3__i.i.int__content <= temp___286)))) then (
     #"functions.adb" 47 0 0# try
      ( #"functions.adb" 47 0 0# abstract ensures {true}(let _ = Functions__multvector__L_3__i.i.int__content in (
       ()))
       end ;
      (let temp___288 = #"functions.adb" 47 0 0# (any int
      ensures {#"functions.adb" 47 0 0# (result = Functions__multvector__L_3__i.i.int__content)} 
      ) in (
       ( #"functions.adb" 47 0 0# abstract ensures {true}(let _ = Functions__multvector__res.res.int__content in (
        ()))
        end ;
       (let temp___287 = #"functions.adb" 47 0 0# (any int
       ensures {#"functions.adb" 47 0 0# (result = Functions__multvector__res.res.int__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop functions.adb:47 *)
        ;
        ( "GP_Sloc:functions.adb:48:10" (#"functions.adb" 48 0 0# ()) );
        ( "GP_Sloc:functions.adb:48:17" (#"functions.adb" 48 0 0# ()) );
        ( "GP_Sloc:functions.adb:48:14" (#"functions.adb" 48 0 0# #"functions.adb" 48 0 0# Functions__multvector__res.res.int__content <- ( (#"functions.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:functions.adb:48:21" "GP_Shape:L_3_while__res_assign__mult" "GP_Id:26" "comment:         res := res * Vector(I);
                    ^ functions.adb:48:21:VC_RANGE_CHECK" (Standard__positive.range_check_((#"functions.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:48:21" "GP_Id:25" "comment:         res := res * Vector(I);
                    ^ functions.adb:48:21:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__res_assign__mult" (Standard__integer.range_check_((Functions__multvector__res.res.int__content * (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (Functions__multvector__L_3__i.i.int__content))))))) )))) )) )) );
        () (* While loop translating the Ada loop from functions.adb:47 *)
        ;
         while True do
         invariant { 
          (#"functions.adb" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:functions.adb:51:13" "GP_Id:30" "comment:           ((if I = Vector'First then
            ^ functions.adb:51:13:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__if" (if ((Functions__multvector__L_3__i.i.int__content = 1)) then (
           ( "GP_Pretty_Ada:2592" "GP_Sloc:functions.adb:52:18" (Functions__multvector__res.res.int__content = (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 1))) )) else ((if ((Functions__multvector__L_3__i.i.int__content = 3)) then (
           ( "GP_Pretty_Ada:2602" "GP_Sloc:functions.adb:54:16" (Functions__multvector__res.res.int__content = (((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 1)) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 2))) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 3)))) )) else ((if ((Functions__multvector__L_3__i.i.int__content = 2)) then (
           ( "GP_Pretty_Ada:2622" "GP_Sloc:functions.adb:56:16" (Functions__multvector__res.res.int__content = ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 1)) * (Standard__positive__rep.to_rep (Array__Int__Standard__positive.get Functions__multvector__vector.vector 2)))) )) else (
           ( "GP_Pretty_Ada:4516" "GP_Sloc:functions.adb:55:13" true ))))))) ))
          }
         ( () (* Assume implicit invariants from the loop functions.adb:47 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (Standard__positive___axiom.dynamic_invariant Functions__multvector__res.res.int__content False True True True) ) /\ true ) /\ (if ((Functions__multvector__L_3__T20b.first <= Functions__multvector__L_3__T20b.last)) then (
          (Functions__multvector__L_3__T20b.dynamic_property Functions__multvector__L_3__T20b.first Functions__multvector__L_3__T20b.last Functions__multvector__L_3__i.i.int__content)) else true) ) /\ true )) (( (1 <= Functions__multvector__L_3__i.i.int__content) /\ (Functions__multvector__L_3__i.i.int__content <= 3) ))) };
         () (* Check for absence of RTE in the invariant of loop functions.adb:47 *)
         ;
          abstract ensures {true}(let _ = (if ((Functions__multvector__L_3__i.i.int__content = 1)) then (
          (Functions__multvector__res.res.int__content = (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (1)))))) else ((if ((Functions__multvector__L_3__i.i.int__content = 3)) then (
          (Functions__multvector__res.res.int__content = (#"functions.adb" 54 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:54:44" "GP_Id:28" "comment:               res = Vector(1) * Vector(2) * Vector(3)
                                           ^ functions.adb:54:44:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__pragargs__if__if__cmp__mult" (Standard__integer.range_check_(((#"functions.adb" 54 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:54:32" "GP_Id:27" "comment:               res = Vector(1) * Vector(2) * Vector(3)
                               ^ functions.adb:54:32:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__pragargs__if__if__cmp__mult__mult" (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (1)))) * (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (2))))))) )) * (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (3))))))) )))) else ((if ((Functions__multvector__L_3__i.i.int__content = 2)) then (
          (Functions__multvector__res.res.int__content = (#"functions.adb" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:56:32" "GP_Id:29" "comment:               res = Vector(1) * Vector(2)));
                               ^ functions.adb:56:32:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__pragargs__if__if__if__cmp__mult" (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (1)))) * (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (2))))))) )))) else (
          (Boolean.of_int(1)))))))) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop functions.adb:47 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop functions.adb:47 *)
         ;
         (if ((Functions__multvector__L_3__i.i.int__content = temp___286)) then (
           raise Functions__multvector__L_3.L_3));
          Functions__multvector__L_3__i.i.int__content <- ( (Functions__multvector__L_3__i.i.int__content + 1) );
         ( "GP_Sloc:functions.adb:48:10" (#"functions.adb" 48 0 0# ()) );
         ( "GP_Sloc:functions.adb:48:17" (#"functions.adb" 48 0 0# ()) );
         ( "GP_Sloc:functions.adb:48:14" (#"functions.adb" 48 0 0# #"functions.adb" 48 0 0# Functions__multvector__res.res.int__content <- ( (#"functions.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:functions.adb:48:21" "GP_Shape:L_3_while__res_assign__mult" "GP_Id:26" "comment:         res := res * Vector(I);
                    ^ functions.adb:48:21:VC_RANGE_CHECK" (Standard__positive.range_check_((#"functions.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.adb:48:21" "GP_Id:25" "comment:         res := res * Vector(I);
                    ^ functions.adb:48:21:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__res_assign__mult" (Standard__integer.range_check_((Functions__multvector__res.res.int__content * (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (Functions__multvector__L_3__i.i.int__content))))))) )))) )) )) ) )
        done )))
        )))
       )
     with
      Functions__multvector__L_3.L_3 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:functions.adb:59:14" (#"functions.adb" 59 0 0# ()) );
   ( "GP_Sloc:functions.adb:59:7" (#"functions.adb" 59 0 0# ( #"functions.adb" 59 0 0# functions__multvector__result.int__content <- ( Functions__multvector__res.res.int__content );
   #"functions.adb" 59 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (functions__multvector__result.int__content = (#"functions.ads" 61 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.ads:61:76" "GP_Id:32" "comment:       MultVector'Result = Vector(Vector'First) * Vector(Vector'First + 1) * Vector(Vector'Last);
                                                                           ^ functions.ads:61:76:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__mult" (Standard__integer.range_check_(((#"functions.ads" 61 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:functions.ads:61:49" "GP_Id:31" "comment:       MultVector'Result = Vector(Vector'First) * Vector(Vector'First + 1) * Vector(Vector'Last);
                                                ^ functions.ads:61:49:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__mult__mult" (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (1)))) * (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (2))))))) )) * (Standard__positive__rep.to_rep((Array__Int__Standard__positive.get(Functions__multvector__vector.vector) (3))))))) ))) in (
   ()))
   end ;
  functions__multvector__result.int__content )
end

(* Module for defining the value of the aggregate at functions.adb:65, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Functions__midterm__result__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Functions__b_binary
 use        Array__Int__Bool
 use        Functions__midterm__T24b
 use        Functions__midterm__result__aggregate_def
 use        Array__Int__Bool

 axiom def_axiom :
  (forall temp___291   : bool.
  (forall temp___292   temp___293   : int.
   (let temp___290 = (Functions__midterm__result__aggregate_def.functions__midterm__result__aggregate_def temp___291 temp___292 temp___293) in (
    ( (if ((Functions__b_binary.dynamic_property Standard__positive.first Standard__positive.last temp___292 temp___293)) then (
     ( ((Functions__midterm__T24b.first temp___290) = temp___292) /\ ((Functions__midterm__T24b.last temp___290) = temp___293) )) else true) /\ (forall temp___294   : int.
     ((Array__Int__Bool.get (Functions__midterm__T24b.to_array temp___290) temp___294) = temp___291)) )))
  ))

end

(* Module for checking contracts and absence of run-time errors in subprogram "midterm" defined at functions.ads:69, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Functions__midterm__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__positive
 use        Standard__positive___axiom
 use        Standard__positive__rep
 use        Standard__integer__rep
 use        Functions__b_binary
 use        Array__Int__Standard__positive
 use        Functions__vector
 use        Functions__vector___axiom
 use        Array__Int__Bool
 use        Functions__midterm__values
 use        Functions__midterm__from
 use        Functions__midterm__to
 use        Functions__midterm__TresultS
 use        Functions__midterm__T24b
 use        Array__Int__Bool
 use        Functions__midterm__result
 use        Functions__midterm__L_4
 use        Functions__midterm__L_4__T25b
 use        Functions__midterm__L_4__i
 use        Functions__midterm__result__aggregate_def
 use        Array__Int__Bool
 use        Array__Int__Bool
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Bool
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Bool
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Bool
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Standard__positive
 use        Array__Int__Bool
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Functions__midterm__result___axiom
 use        Functions__midterm__result__aggregate_def___axiom
 use        Functions__midterm__L_4__i___axiom
 use        Functions__midterm__L_4___axiom
 use        Functions__vector___axiom
 use        Functions__b_binary___axiom
 use        Functions__midterm__values___axiom
 use        Functions__midterm__from___axiom
 use        Functions__midterm__to___axiom
 use        Functions__midterm__TresultS___axiom
 use        Functions__midterm__TTresultSP1___axiom
 use        Functions__midterm__T23b___axiom
 use        Functions__midterm__T24b___axiom
 use        Functions__midterm__L_4__T25b___axiom

 val functions__midterm__result "model_projected" "model_trace:3183@result" "name:MidTerm"  : Functions__b_binary.b_binary__ref 
 
 let def #"functions.ads" 69 0 0#"W:diverges:N" "GP_Subp:functions.ads:69" 
   (__void_param : unit)
  requires { #"functions.ads" 69 0 0# true }
  ensures { #"functions.ads" 69 0 0# (#"functions.ads" 78 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:functions.ads:78:14" "GP_Id:50" "comment:     Post => (for all I in Values'Range =>
             ^ functions.ads:78:14:VC_POSTCONDITION" (forall i #"functions.ads" 78 0 0#  "model" "name:I" "model_trace:3260"  : int.
   ( ( ((Functions__vector.first Functions__midterm__values.values) <= i) /\ (i <= (Functions__vector.last Functions__midterm__values.values)) ) -> (if (((Array__Int__Bool.get (Functions__b_binary.to_array functions__midterm__result.Functions__b_binary.b_binary__content) i) = True)) then (
    ( ( "GP_Pretty_Ada:3279" "GP_Sloc:functions.ads:80:23" ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) i)) >= Functions__midterm__from.from) ) /\ ( "GP_Pretty_Ada:3285" "GP_Sloc:functions.ads:80:45" ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) i)) <= Functions__midterm__to.to__) ) )) else (
    ( "GP_Pretty_Ada:3292" "GP_Sloc:functions.ads:82:20" ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) i)) <= Functions__midterm__from.from) \/ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) i)) >= Functions__midterm__to.to__) ) ))) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram functions.ads:69 *)
  ;
   assume {  (Functions__vector___axiom.dynamic_invariant Functions__midterm__values.values True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Functions__midterm__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Functions__midterm__to.to__ True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram functions.ads:69 *)
  ;
  () (* Check for RTE in the Pre of the subprogram functions.ads:69 *)
  ;
   abstract ensures {true}(let _ = ( (Functions__midterm__from.from <= Functions__midterm__to.to__) && ( ((  abstract ensures {true}(let _ = Functions__midterm__values.values in (
   ()))
   end ;
  (Functions__vector.last(Functions__midterm__values.values)) ) < 2147483647) && ((  abstract ensures {true}(let _ = Functions__midterm__values.values in (
   ()))
   end ;
  (Functions__vector.last(Functions__midterm__values.values)) ) > (  abstract ensures {true}(let _ = Functions__midterm__values.values in (
   ()))
   end ;
  (Functions__vector.first(Functions__midterm__values.values)) )) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram functions.ads:69 *)
  ;
   assume {  ( (Functions__midterm__from.from <= Functions__midterm__to.to__) /\ ( ((Functions__vector.last Functions__midterm__values.values) < 2147483647) /\ ((Functions__vector.last Functions__midterm__values.values) > (Functions__vector.first Functions__midterm__values.values)) ) ) };
   try
   ( (#"functions.adb" 63 0 0# ());
   (#"functions.adb" 65 0 0# (#"functions.adb" 65 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:functions.adb:65:7" "GP_Id:37" "comment:      Result : B_Binary (Values'Range) := (others => False);
      ^ functions.adb:65:7:VC_RANGE_CHECK" #"functions.adb" 65 0 0# (any unit
   requires {#"functions.adb" 65 0 0# ( ((Functions__vector.first Functions__midterm__values.values) <= (Functions__vector.last Functions__midterm__values.values)) -> ( ((Functions__vector.first Functions__midterm__values.values) >= Standard__positive.first) /\ ((Functions__vector.last Functions__midterm__values.values) <= Standard__positive.last) ) )} 
   ensures {#"functions.adb" 65 0 0# true} 
   ) )));
   (#"functions.adb" 65 0 0# ( (let functions__midterm__result__assume = (let temp___296 = (let temp___295 = (Functions__midterm__result__aggregate_def.functions__midterm__result__aggregate_def((Boolean.of_int(0))) ((Functions__vector.first Functions__midterm__values.values)) ((Functions__vector.last Functions__midterm__values.values))) in (
    ( #"functions.adb" 65 0 0# assume { #"functions.adb" 65 0 0# ((Functions__midterm__T24b.first temp___295) = (Functions__vector.first Functions__midterm__values.values)) };
    #"functions.adb" 65 0 0# assume { #"functions.adb" 65 0 0# ((Functions__midterm__T24b.last temp___295) = (Functions__vector.last Functions__midterm__values.values)) };
    temp___295 )))
    in (
    ( #"functions.adb" 65 0 0# assert { #"functions.adb" 65 0 0# (#"functions.adb" 65 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Shape:result_decl__aggr" "GP_Sloc:functions.adb:65:43" "GP_Id:38" "comment:      Result : B_Binary (Values'Range) := (others => False);
                                          ^ functions.adb:65:43:VC_LENGTH_CHECK" ((if (((Functions__midterm__T24b.first(temp___296)) <= (Functions__midterm__T24b.last(temp___296)))) then (
     (((Functions__midterm__T24b.last(temp___296)) - (Functions__midterm__T24b.first(temp___296))) + 1)) else (
     0)) = (if (((Functions__vector.first Functions__midterm__values.values) <= (Functions__vector.last Functions__midterm__values.values))) then (
     (((Functions__vector.last Functions__midterm__values.values) - (Functions__vector.first Functions__midterm__values.values)) + 1)) else (
     0))) )) };
    (Functions__midterm__TresultS.of_array((Array__Int__Bool.slide((Functions__midterm__T24b.to_array(temp___296))) ((Functions__midterm__T24b.first(temp___296))) ((Functions__vector.first Functions__midterm__values.values)))) ((Functions__vector.first Functions__midterm__values.values)) ((Functions__vector.last Functions__midterm__values.values))) )))
    in (
    (  Functions__midterm__result.result__.Array__Int__Bool.map__content <- ( (Functions__midterm__TresultS.to_array(functions__midterm__result__assume)) );
     assume {  ((Standard__integer__rep.to_rep(Functions__midterm__result.result____first)) = (Functions__midterm__TresultS.first(functions__midterm__result__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Functions__midterm__result.result____last)) = (Functions__midterm__TresultS.last(functions__midterm__result__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Functions__midterm__TresultS.dynamic_property (Functions__vector.first Functions__midterm__values.values) (Functions__vector.last Functions__midterm__values.values) (Standard__integer__rep.to_rep Functions__midterm__result.result____first) (Standard__integer__rep.to_rep Functions__midterm__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Functions__midterm__result.result____first) = (Functions__vector.first Functions__midterm__values.values)) /\ ((Standard__integer__rep.to_rep Functions__midterm__result.result____last) = (Functions__vector.last Functions__midterm__values.values)) ) ))) } ));
   (#"functions.adb" 67 0 0# ());
   ( "GP_Sloc:functions.adb:67:29" (#"functions.adb" 67 0 0# (let temp___298 = ( #"functions.adb" 67 0 0# abstract ensures {true}(let _ = Functions__midterm__values.values in (
    ()))
    end ;
   (Functions__vector.first(Functions__midterm__values.values)) ) in (
   (let temp___299 = ( #"functions.adb" 67 0 0# abstract ensures {true}(let _ = Functions__midterm__values.values in (
    ()))
    end ;
   (Functions__vector.last(Functions__midterm__values.values)) ) in (
    ( #"functions.adb" 67 0 0# Functions__midterm__L_4__i.i.int__content <- ( temp___298 );
    () (* Translation of an Ada loop from functions.adb:67 *)
    ;
    (if ((Boolean.andb((temp___298 <= Functions__midterm__L_4__i.i.int__content)) ((Functions__midterm__L_4__i.i.int__content <= temp___299)))) then (
     #"functions.adb" 67 0 0# try
      ( #"functions.adb" 67 0 0# abstract ensures {true}(let _ = Functions__midterm__L_4__i.i.int__content in (
       ()))
       end ;
      (let temp___303 = #"functions.adb" 67 0 0# (any int
      ensures {#"functions.adb" 67 0 0# (result = Functions__midterm__L_4__i.i.int__content)} 
      ) in (
       ( #"functions.adb" 67 0 0# abstract ensures {true}(let _ = Functions__midterm__result.result__.Array__Int__Bool.map__content in (
        ()))
        end ;
       (let temp___301 = #"functions.adb" 67 0 0# (any Array__Int__Bool.map
       ensures {#"functions.adb" 67 0 0# (result = Functions__midterm__result.result__.Array__Int__Bool.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop functions.adb:67 *)
        ;
        ( "GP_Sloc:functions.adb:68:10" (#"functions.adb" 68 0 0# (if ((Boolean.andb(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) (Functions__midterm__L_4__i.i.int__content)))) >= Functions__midterm__from.from)) (((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) (Functions__midterm__L_4__i.i.int__content)))) <= Functions__midterm__to.to__)))) then (
         ( ( "GP_Sloc:functions.adb:69:13" (#"functions.adb" 69 0 0# ()) );
         ( "GP_Sloc:functions.adb:69:23" (#"functions.adb" 69 0 0# #"functions.adb" 69 0 0# Functions__midterm__result.result__.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Functions__midterm__result.result__.Array__Int__Bool.map__content) (Functions__midterm__L_4__i.i.int__content) ((Boolean.of_int(1)))) )) ) )) else (
         ()))) );
        () (* While loop translating the Ada loop from functions.adb:67 *)
        ;
         while True do
         invariant { 
          (#"functions.adb" 73 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:functions.adb:73:14" "GP_Id:44" "comment:           ( for all J in Values'First .. I =>
             ^ functions.adb:73:14:VC_LOOP_INVARIANT" "GP_Shape:L_4_while__pragargs__forall" (forall j #"functions.adb" 73 0 0#  "model" "name:J" "model_trace:2727"  : int.
           ( ( ((Functions__vector.first Functions__midterm__values.values) <= j) /\ (j <= Functions__midterm__L_4__i.i.int__content) ) -> (if (((Array__Int__Bool.get Functions__midterm__result.result__.Array__Int__Bool.map__content j) = True)) then (
            ( ( "GP_Pretty_Ada:2747" "GP_Sloc:functions.adb:74:34" ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) j)) >= Functions__midterm__from.from) ) /\ ( "GP_Pretty_Ada:2753" "GP_Sloc:functions.adb:74:56" ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) j)) <= Functions__midterm__to.to__) ) )) else (
            ( "GP_Pretty_Ada:2760" "GP_Sloc:functions.adb:75:20" ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) j)) <= Functions__midterm__from.from) \/ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) j)) >= Functions__midterm__to.to__) ) ))) )) ))
          }
         ( () (* Assume implicit invariants from the loop functions.adb:67 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (True) then (
          true) else (
          ( (Functions__midterm__TresultS.dynamic_property (Functions__vector.first Functions__midterm__values.values) (Functions__vector.last Functions__midterm__values.values) (Standard__integer__rep.to_rep Functions__midterm__result.result____first) (Standard__integer__rep.to_rep Functions__midterm__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Functions__midterm__result.result____first) = (Functions__vector.first Functions__midterm__values.values)) /\ ((Standard__integer__rep.to_rep Functions__midterm__result.result____last) = (Functions__vector.last Functions__midterm__values.values)) ) ))) ) /\ (forall temp___302   : int.
          (if (( ((Standard__integer__rep.to_rep Functions__midterm__result.result____first) <= temp___302) /\ (temp___302 <= (Standard__integer__rep.to_rep Functions__midterm__result.result____last)) )) then (
           (if (( (temp___299 < temp___302) \/ ( (temp___302 < temp___298) \/ (Functions__midterm__L_4__i.i.int__content < temp___302) ) )) then (
            ((Array__Int__Bool.get Functions__midterm__result.result__.Array__Int__Bool.map__content temp___302) = (Array__Int__Bool.get temp___301 temp___302))) else (
            true))) else true)) ) /\ (if (((Functions__vector.first Functions__midterm__values.values) <= (Functions__vector.last Functions__midterm__values.values))) then (
          (Functions__midterm__L_4__T25b.dynamic_property (Functions__vector.first Functions__midterm__values.values) (Functions__vector.last Functions__midterm__values.values) Functions__midterm__L_4__i.i.int__content)) else true) ) /\ true )) (( ((Functions__vector.first Functions__midterm__values.values) <= Functions__midterm__L_4__i.i.int__content) /\ (Functions__midterm__L_4__i.i.int__content <= (Functions__vector.last Functions__midterm__values.values)) ))) };
         () (* Check for absence of RTE in the invariant of loop functions.adb:67 *)
         ;
          abstract ensures {true}(let _ = ( (let j =  (any int
         ) in (
          (if ((Boolean.andb(((  abstract ensures {true}(let _ = Functions__midterm__values.values in (
           ()))
           end ;
          (Functions__vector.first(Functions__midterm__values.values)) ) <= j)) ((j <= Functions__midterm__L_4__i.i.int__content)))) then (
            abstract ensures {true}(let _ = (if ((Array__Int__Bool.get(Functions__midterm__result.result__.Array__Int__Bool.map__content) ((  assert {  (#"functions.adb" 74 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.adb:74:25" "GP_Id:43" "comment:             (if Result(J) then (Values(J) >= From and Values(J) <= To)
                        ^ functions.adb:74:25:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__ixdcomp" ( ((Standard__integer__rep.to_rep Functions__midterm__result.result____first) <= j) /\ (j <= (Standard__integer__rep.to_rep Functions__midterm__result.result____last)) ) )) };
           j )))) then (
            (Boolean.andb(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) ((  assert {  (#"functions.adb" 74 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.adb:74:41" "GP_Id:39" "comment:             (if Result(J) then (Values(J) >= From and Values(J) <= To)
                                        ^ functions.adb:74:41:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__and__cmp__ixdcomp" ( ((Functions__vector.first Functions__midterm__values.values) <= j) /\ (j <= (Functions__vector.last Functions__midterm__values.values)) ) )) };
            j ))))) >= Functions__midterm__from.from)) (((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) ((  assert {  (#"functions.adb" 74 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__and__cmp__ixdcomp" "GP_Sloc:functions.adb:74:63" "GP_Id:40" "comment:             (if Result(J) then (Values(J) >= From and Values(J) <= To)
                                                              ^ functions.adb:74:63:VC_INDEX_CHECK" ( ((Functions__vector.first Functions__midterm__values.values) <= j) /\ (j <= (Functions__vector.last Functions__midterm__values.values)) ) )) };
            j ))))) <= Functions__midterm__to.to__)))) else (
            (Boolean.orb(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) ((  assert {  (#"functions.adb" 75 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.adb:75:28" "GP_Id:41" "comment:              else (Values(J) <= From or Values(J) >= To)
                           ^ functions.adb:75:28:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__or__cmp__ixdcomp" ( ((Functions__vector.first Functions__midterm__values.values) <= j) /\ (j <= (Functions__vector.last Functions__midterm__values.values)) ) )) };
            j ))))) <= Functions__midterm__from.from)) (((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) ((  assert {  (#"functions.adb" 75 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_4_while__pragargs__forall__if__or__cmp__ixdcomp" "GP_Sloc:functions.adb:75:49" "GP_Id:42" "comment:              else (Values(J) <= From or Values(J) >= To)
                                                ^ functions.adb:75:49:VC_INDEX_CHECK" ( ((Functions__vector.first Functions__midterm__values.values) <= j) /\ (j <= (Functions__vector.last Functions__midterm__values.values)) ) )) };
            j ))))) >= Functions__midterm__to.to__))))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2727"  : int.
          ( ( ((Functions__vector.first Functions__midterm__values.values) <= j) /\ (j <= Functions__midterm__L_4__i.i.int__content) ) -> (if (((Array__Int__Bool.get Functions__midterm__result.result__.Array__Int__Bool.map__content j) = True)) then (
           ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) j)) >= Functions__midterm__from.from) /\ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) j)) <= Functions__midterm__to.to__) )) else (
           ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) j)) <= Functions__midterm__from.from) \/ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) j)) >= Functions__midterm__to.to__) ))) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop functions.adb:67 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop functions.adb:67 *)
         ;
         (if ((Functions__midterm__L_4__i.i.int__content = temp___299)) then (
           raise Functions__midterm__L_4.L_4));
          Functions__midterm__L_4__i.i.int__content <- ( (Functions__midterm__L_4__i.i.int__content + 1) );
         ( "GP_Sloc:functions.adb:68:10" (#"functions.adb" 68 0 0# (if ((Boolean.andb(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) (Functions__midterm__L_4__i.i.int__content)))) >= Functions__midterm__from.from)) (((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) (Functions__midterm__L_4__i.i.int__content)))) <= Functions__midterm__to.to__)))) then (
          ( ( "GP_Sloc:functions.adb:69:13" (#"functions.adb" 69 0 0# ()) );
          ( "GP_Sloc:functions.adb:69:23" (#"functions.adb" 69 0 0# #"functions.adb" 69 0 0# Functions__midterm__result.result__.Array__Int__Bool.map__content <- ( (Array__Int__Bool.set(Functions__midterm__result.result__.Array__Int__Bool.map__content) (Functions__midterm__L_4__i.i.int__content) ((Boolean.of_int(1)))) )) ) )) else (
          ()))) ) )
        done )))
        )))
       )
     with
      Functions__midterm__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:functions.adb:79:14" (#"functions.adb" 79 0 0# ()) );
   ( "GP_Sloc:functions.adb:79:7" (#"functions.adb" 79 0 0# ( #"functions.adb" 79 0 0# functions__midterm__result.Functions__b_binary.b_binary__content <- ( (Functions__b_binary.of_array(Functions__midterm__result.result__.Array__Int__Bool.map__content) ((Standard__integer__rep.to_rep(Functions__midterm__result.result____first))) ((Standard__integer__rep.to_rep(Functions__midterm__result.result____last)))) );
   #"functions.adb" 79 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Functions__midterm__values.values in (
    ()))
    end ;
   (Functions__vector.first(Functions__midterm__values.values)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Functions__midterm__values.values in (
    ()))
    end ;
   (Functions__vector.last(Functions__midterm__values.values)) ))))) then (
     abstract ensures {true}(let _ = (if ((Array__Int__Bool.get((Functions__b_binary.to_array(functions__midterm__result.Functions__b_binary.b_binary__content))) ((  assert {  (#"functions.ads" 79 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.ads:79:36" "GP_Id:49" "comment:                (if Midterm'Result(I) then
                                   ^ functions.ads:79:36:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__ixdcomp" ( ((Functions__b_binary.first functions__midterm__result.Functions__b_binary.b_binary__content) <= i) /\ (i <= (Functions__b_binary.last functions__midterm__result.Functions__b_binary.b_binary__content)) ) )) };
    i )))) then (
     (Boolean.andb(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) ((  assert {  (#"functions.ads" 80 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.ads:80:30" "GP_Id:45" "comment:                     (Values(I) >= From and Values(I) <= To)
                             ^ functions.ads:80:30:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__and__cmp__ixdcomp" ( ((Functions__vector.first Functions__midterm__values.values) <= i) /\ (i <= (Functions__vector.last Functions__midterm__values.values)) ) )) };
     i ))))) >= Functions__midterm__from.from)) (((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) ((  assert {  (#"functions.ads" 80 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__and__cmp__ixdcomp" "GP_Sloc:functions.ads:80:52" "GP_Id:46" "comment:                     (Values(I) >= From and Values(I) <= To)
                                                   ^ functions.ads:80:52:VC_INDEX_CHECK" ( ((Functions__vector.first Functions__midterm__values.values) <= i) /\ (i <= (Functions__vector.last Functions__midterm__values.values)) ) )) };
     i ))))) <= Functions__midterm__to.to__)))) else (
     (Boolean.orb(((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) ((  assert {  (#"functions.ads" 82 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:functions.ads:82:28" "GP_Id:47" "comment:                   (Values(I) <= From or Values(I) >= To)));
                           ^ functions.ads:82:28:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__or__cmp__ixdcomp" ( ((Functions__vector.first Functions__midterm__values.values) <= i) /\ (i <= (Functions__vector.last Functions__midterm__values.values)) ) )) };
     i ))))) <= Functions__midterm__from.from)) (((Standard__positive__rep.to_rep((Array__Int__Standard__positive.get((Functions__vector.to_array(Functions__midterm__values.values))) ((  assert {  (#"functions.ads" 82 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__or__cmp__ixdcomp" "GP_Sloc:functions.ads:82:49" "GP_Id:48" "comment:                   (Values(I) <= From or Values(I) >= To)));
                                                ^ functions.ads:82:49:VC_INDEX_CHECK" ( ((Functions__vector.first Functions__midterm__values.values) <= i) /\ (i <= (Functions__vector.last Functions__midterm__values.values)) ) )) };
     i ))))) >= Functions__midterm__to.to__))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:3260"  : int.
   ( ( ((Functions__vector.first Functions__midterm__values.values) <= i) /\ (i <= (Functions__vector.last Functions__midterm__values.values)) ) -> (if (((Array__Int__Bool.get (Functions__b_binary.to_array functions__midterm__result.Functions__b_binary.b_binary__content) i) = True)) then (
    ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) i)) >= Functions__midterm__from.from) /\ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) i)) <= Functions__midterm__to.to__) )) else (
    ( ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) i)) <= Functions__midterm__from.from) \/ ((Standard__positive__rep.to_rep (Array__Int__Standard__positive.get (Functions__vector.to_array Functions__midterm__values.values) i)) >= Functions__midterm__to.to__) ))) )) )} 
  ) ) in (
   ()))
   end ;
  functions__midterm__result.Functions__b_binary.b_binary__content )
end
